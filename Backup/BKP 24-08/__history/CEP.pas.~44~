unit CEP;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.Buttons, Vcl.ComCtrls,
  CidadeDataModule, ConsultarCidadeForm,
  EstadoDataModule, ConsultarEstadoForm,
  PaisDataModule, ConsultarPaisForm,
  CEPDataModule, ConsultarCEPForm,
  Log, LogDataModule,
  GlobalUnit, Vcl.Mask;

type
  TCadCEP = class(TForm)
    Panel1: TPanel;
    lblCEP: TLabel;
    lblCidade: TLabel;
    lblEstado: TLabel;
    lblPais: TLabel;
    EdtCidade: TEdit;
    EdtEstado: TEdit;
    EdtPais: TEdit;
    SBPais: TSpeedButton;
    SBEstado: TSpeedButton;
    SBCidade: TSpeedButton;
    btnIncluir: TButton;
    btnAlterar: TButton;
    btnGravarIncluir: TButton;
    btnGravarAlterar: TButton;
    btnDesistir: TButton;
    btnConsultar: TButton;
    btnExcluir: TButton;
    lblAtivo: TLabel;
    CBAtivo: TCheckBox;
    btnFechar: TButton;
    EdtCEP: TEdit;
    procedure SBCidadeClick(Sender: TObject);
    procedure SBEstadoClick(Sender: TObject);
    procedure SBPaisClick(Sender: TObject);
    procedure btnConsultarClick(Sender: TObject);
    procedure btnIncluirClick(Sender: TObject);
    procedure btnGravarIncluirClick(Sender: TObject);
    procedure btnDesistirClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure btnGravarAlterarClick(Sender: TObject);
    procedure btnExcluirClick(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  CadCEP: TCadCEP;

implementation

{$R *.dfm}

uses MenuPrincipal;

procedure TCadCEP.btnIncluirClick(Sender: TObject);
begin
  EdtCEP.Enabled := True;
  EdtCidade.Enabled := True;
  EdtEstado.Enabled := True;
  EdtPais.Enabled := True;
  SBCidade.Enabled := True;
  SBEstado.Enabled := True;
  SBPais.Enabled := True;
  CBAtivo.Enabled := True;

  EdtCEP.Clear;
  EdtCidade.Clear;
  EdtEstado.Clear;
  EdtPais.Clear;

  btnIncluir.Visible := False;
  btnAlterar.Visible := False;
  btnGravarAlterar.Visible := False;
  btnExcluir.Visible := False;
  btnConsultar.Visible := False;

  btnGravarIncluir.Visible := True;
  btnDesistir.Visible := True;
end;

procedure TCadCEP.btnGravarIncluirClick(Sender: TObject);
var CEP, Cidade, Estado, Pais, Ativo: string;
begin
 CEP := EdtCEP.Text;
 Cidade := EdtCidade.Text;
 Estado := EdtEstado.Text;
 Pais := EdtPais.Text;
 if CBAtivo.Checked then Ativo := 'S'
 else Ativo := 'N';

 if EdtCEP.Text = '' then begin
 ShowMessage('CEP não pode ser vazio!');
 end
 else begin

 if EdtCidade.Text = '' then begin
 ShowMessage('Cidade não pode ser vazia!');
 end
 else begin

 if EdtEstado.Text = '' then begin
 ShowMessage('Estado não pode ser vazio!');
 end
 else begin

 if EdtPais.Text = '' then begin
 ShowMessage('País não pode ser vazio!');
 end
 else begin

 CadCEPDataModule.SelectQuery.SQL.Clear;
 CadCEPDataModule.SelectQuery.Close;
 CadCEPDataModule.SelectQuery.SQL.Text :=
 'select * from cadcep where CEP = :cep';
 CadCEPDataModule.SelectQuery.ParamByName('CEP').AsString := CEP;
 CadCEPDataModule.SelectQuery.Open;

 if not CadCEPDataModule.SelectQuery.IsEmpty then begin
 ShowMessage('CEP já cadastrado!')
 end
 else begin

 CadCEPDataModule.InsertQuery.Close;
 CadCEPDataModule.InsertQuery.SQL.Clear;
 CadCEPDataModule.InsertQuery.SQL.Text :=
 'insert into cadCEP (CEP, cidade, estado, pais, ativo) values (:CEP, :Cidade, :Estado, :Pais, :Ativo)';
 CadCEPDataModule.InsertQuery.ParamByName('CEP').AsString := CEP;
 CadCEPDataModule.InsertQuery.ParamByName('cidade').AsString := cidade;
 CadCEPDataModule.InsertQuery.ParamByName('estado').AsString := estado;
 CadCEPDataModule.InsertQuery.ParamByName('pais').AsString := pais;
 CadCEPDataModule.InsertQuery.ParamByName('ativo').AsString := ativo;

 LogModule.InserirLog.SQL.Clear;
 LogModule.InserirLog.SQL.Text :=
 'insert into logs (descricao, tela, data, emp_id, usuario) values (:descricao, :tela, :data, :emp_id, :usuario)';
 LogModule.InserirLog.ParamByName('descricao').AsString :=
 'Inseriu o CEP ' + CEP + ' na cidade ' + cidade + ' no estado ' + estado + ' no país ' + pais + ' e ativo ' + ativo;
 LogModule.InserirLog.ParamByName('tela').AsString := 'CadCEP';
 LogModule.InserirLog.ParamByName('data').AsDatetime := Now;
 LogModule.InserirLog.ParamByName('usuario').AsString := UsuarioLogado;
 LogModule.InserirLog.ParamByName('emp_id').AsString := EmpresaLogada;
 try
 CadCEPDataModule.InsertQuery.ExecSQL;
 LogModule.InserirLog.ExecSQL;
 ShowMessage('Cadastrado com sucesso!');
 EdtCEP.Enabled := False;
 EdtCidade.Enabled := False;
 EdtEstado.Enabled := False;
 EdtPais.Enabled := False;
 SBCidade.Enabled := False;
 SBEstado.Enabled := False;
 SBPais.Enabled := False;

 btnIncluir.Visible := True;
 btnAlterar.Visible := True;
 btnExcluir.Visible := True;
 btnConsultar.Visible := True;

 btnGravarIncluir.Visible := False;
 btnDesistir.Visible := False;
 except
 ShowMessage('Erro na inclusão');
 end;
end;
end;
end;
end;
end;
end;

procedure TCadCEP.btnAlterarClick(Sender: TObject);
begin
  if EdtCEP.Text = '' then begin
  ShowMessage('CEP não selecionado')
  end
  else begin
  EdtCidade.Enabled := True;
  EdtEstado.Enabled := True;
  EdtPais.Enabled := True;
  SBCidade.Enabled := True;
  SBEstado.Enabled := True;
  SBPais.Enabled := True;
  CBAtivo.Enabled := True;

  btnIncluir.Visible := False;
  btnAlterar.Visible := False;
  btnGravarIncluir.Visible := False;
  btnExcluir.Visible := False;
  btnConsultar.Visible := False;

  btnDesistir.Visible := True;
  btnGravarAlterar.Visible := True;
end;
end;

procedure TCadCEP.btnGravarAlterarClick(Sender: TObject);
var CEP, Cidade, Estado, Pais, Ativo: string;
begin
 CEP := EdtCEP.Text;
 Cidade := EdtCidade.Text;
 Estado := EdtEstado.Text;
 Pais := EdtPais.Text;
 if CBAtivo.Checked then Ativo := 'S'
 else Ativo := 'N';

 if EdtCEP.Text = '' then begin
 ShowMessage('CEP não pode ser vazio!');
 end
 else begin

 if EdtCidade.Text = '' then begin
 ShowMessage('Cidade não pode ser vazia!');
 end
 else begin

 if EdtEstado.Text = '' then begin
 ShowMessage('Estado não pode ser vazio!');
 end
 else begin

 if EdtPais.Text = '' then begin
 ShowMessage('País não pode ser vazio!');
 end
 else begin

 CadCEPDataModule.UpdateQuery.Close;
 CadCEPDataModule.UpdateQuery.SQL.Clear;
 CadCEPDataModule.UpdateQuery.SQL.Text :=
 'update cadCEP set cidade = :cidade, estado = :estado, pais = :pais, ativo = :ativo where CEP = :CEP';
 CadCEPDataModule.UpdateQuery.ParamByName('CEP').AsString := CEP;
 CadCEPDataModule.UpdateQuery.ParamByName('cidade').AsString := cidade;
 CadCEPDataModule.UpdateQuery.ParamByName('estado').AsString := estado;
 CadCEPDataModule.UpdateQuery.ParamByName('pais').AsString := pais;
 CadCEPDataModule.UpdateQuery.ParamByName('ativo').AsString := ativo;

 LogModule.InserirLog.SQL.Clear;
 LogModule.InserirLog.SQL.Text :=
 'insert into logs (descricao, tela, data, emp_id, usuario) values (:descricao, :tela, :data, :emp_id, :usuario)';
 LogModule.InserirLog.ParamByName('descricao').AsString :=
 'Alterou o CEP ' + CEP + ' na cidade ' + cidade + ' no estado ' + estado + ' no país ' + pais + ' e ativo ' + ativo;
 LogModule.InserirLog.ParamByName('tela').AsString := 'CadCEP';
 LogModule.InserirLog.ParamByName('data').AsDatetime := Now;
 LogModule.InserirLog.ParamByName('usuario').AsString := UsuarioLogado;
 LogModule.InserirLog.ParamByName('emp_id').AsString := EmpresaLogada;
 try
 CadCEPDataModule.UpdateQuery.ExecSQL;
 LogModule.InserirLog.ExecSQL;
 ShowMessage('Alterado com sucesso!');
 EdtCEP.Enabled := False;
 EdtCidade.Enabled := False;
 EdtEstado.Enabled := False;
 EdtPais.Enabled := False;
 SBCidade.Enabled := False;
 SBEstado.Enabled := False;
 SBPais.Enabled := False;
 CBAtivo.Enabled := False;

 btnIncluir.Visible := True;
 btnAlterar.Visible := True;
 btnExcluir.Visible := True;
 btnConsultar.Visible := True;

 btnGravarIncluir.Visible := False;
 btnGravarAlterar.Visible := False;
 btnDesistir.Visible := False;
 except
 ShowMessage('Erro na alteração');
 end;
end;
end;
end;
end;
end;

procedure TCadCEP.btnDesistirClick(Sender: TObject);
begin
  EdtCEP.Enabled := False;
  EdtCidade.Enabled := False;
  EdtEstado.Enabled := False;
  EdtPais.Enabled := False;
  SBCidade.Enabled := False;
  SBEstado.Enabled := False;
  SBPais.Enabled := False;
  CBAtivo.Enabled := False;

  EdtCEP.Clear;
  EdtCidade.Clear;
  EdtEstado.Clear;
  EdtPais.Clear;

  btnIncluir.Visible := True;
  btnAlterar.Visible := True;
  btnExcluir.Visible := True;
  btnConsultar.Visible := True;

  btnGravarIncluir.Visible := False;
  btnDesistir.Visible := False;
  btnGravarAlterar.Visible := False;
end;

procedure TCadCEP.btnExcluirClick(Sender: TObject);
var CEP, Cidade, Estado, Pais, Ativo, tela: string;
    data: tdatetime;
begin
 CEP := EdtCEP.Text;
 Cidade := EdtCidade.Text;
 Estado := EdtEstado.Text;
 Pais := EdtPais.Text;
 if CBAtivo.Checked then Ativo := 'S'
 else Ativo := 'N';
 tela := 'CadCEP';
 data := Now;

 CadCEPDataModule.SelectQuery.SQL.Clear;
 CadCEPDataModule.SelectQuery.Close;
 CadCEPDataModule.SelectQuery.SQL.Text :=
 'select * from cadentidade where CEP = :cep';
 CadCEPDataModule.SelectQuery.ParamByName('CEP').AsString := CEP;
 CadCEPDataModule.SelectQuery.Open;

 if not CadCEPDataModule.SelectQuery.IsEmpty then begin
 ShowMessage('CEP está sendo usado no cadastro de Entidade! Favor verifique!')
 end
 else begin

 CadCEPDataModule.SelectQuery.SQL.Clear;
 CadCEPDataModule.SelectQuery.Close;
 CadCEPDataModule.SelectQuery.SQL.Text :=
 'select * from cadcep where CEP = :cep';
 CadCEPDataModule.SelectQuery.ParamByName('CEP').AsString := CEP;
 CadCEPDataModule.SelectQuery.Open;

 if CadCEPDataModule.SelectQuery.IsEmpty then begin
 ShowMessage('CEP já está cadastrado!')
 end
 else begin

 CadCEPDataModule.DeleteQuery.Close;
 CadCEPDataModule.DeleteQuery.SQL.Clear;
 CadCEPDataModule.DeleteQuery.SQL.Text := 'delete from cadcep where cep = :cep';
 CadCEPDataModule.DeleteQuery.ParamByName('CEP').AsString := CEP;

 LogModule.InserirLog.SQL.Clear;
 LogModule.InserirLog.SQL.Text :=
 'insert into logs (descricao, tela, data, usuario, emp_id) values (:descricao, :tela, :data, :usuario, :emp_id)';
 LogModule.InserirLog.ParamByName('descricao').AsString :=
 'Excluiu o CEP ' + CEP + ' na cidade ' + cidade + ' no estado ' + estado + ' no país ' + pais + ' e ativo ' + ativo;
 LogModule.InserirLog.ParamByName('tela').AsString := tela;
 LogModule.InserirLog.ParamByName('data').AsDatetime := Data;
 LogModule.InserirLog.ParamByName('usuario').AsString := UsuarioLogado;
 LogModule.InserirLog.ParamByName('emp_id').AsString := EmpresaLogada;
 try
 CadCEPDataModule.SelectQuery.ExecSQL;
 LogModule.InserirLog.ExecSQL;
 ShowMessage('Excluído com sucesso');
 EdtCEP.Clear;
 EdtCidade.Clear;
 EdtEstado.Clear;
 EdtPais.Clear;
 except
 ShowMessage('Erro na exclusão!');
 end;
 end;
 end;
 end;

procedure TCadCEP.btnFecharClick(Sender: TObject);
begin
 Fechartela(sender);
end;

procedure TCadCEP.btnConsultarClick(Sender: TObject);
var CEP, Cidade, Estado, Pais, ativo: string;
begin
  CadCEPDataModule.FDQuery1.Close;
  CadCEPDataModule.FDQuery1.Open;
  Application.CreateForm(TConsultarCEP, ConsultarCEP);
  CEP := ConsultarCEP.SelecionarCEP;
  Cidade := ConsultarCEP.Cidade;
  Estado := ConsultarCEP.Estado;
  Pais := ConsultarCEP.Pais;
  Ativo := ConsultarCEP.Ativo;
  if cep <> '' then
  begin
    EdtCEP.Text := CEP;
    EdtCidade.Text := Cidade;
    EdtEstado.Text := Estado;
    EdtPais.Text := Pais;
    Ativo := ConsultarCEP.Ativo;
    CBAtivo.Checked := Ativo = 'S';
  end;
end;

procedure TCadCEP.SBCidadeClick(Sender: TObject);
var cidade: string;
begin
  CadCidadeDataModule.FDQuery.Close;
  CadCidadeDataModule.FDQuery.Open;
  Application.CreateForm(TConsultarCidade, ConsultarCidade);
  cidade := ConsultarCidade.SelecionarCidade;
  if cidade <> '' then
  begin
    EdtCidade.Text := cidade;
  end;
end;

procedure TCadCEP.SBEstadoClick(Sender: TObject);
var codigo, sigla: string;
begin
  CadEstadoModule.FDQuery1.Close;
  CadEstadoModule.FDQuery1.Open;
  Application.CreateForm(TConsultarEstado, ConsultarEstado);
  codigo := ConsultarEstado.SelecionarEstado;
  if codigo <> '' then
  begin
   sigla := ConsultarEstado.Sigla;
   EdtEstado.Text := sigla;
  end;
end;

procedure TCadCEP.SBPaisClick(Sender: TObject);
var sigla: string;
begin
  CadPaisDataModule.FDQuery1.Close;
  CadPaisDataModule.FDQuery1.Open;
  Application.CreateForm(TConsultarPais, ConsultarPais);
  sigla := ConsultarPais.SelecionarPais;
  if sigla <> '' then
  begin
    EdtPais.Text := sigla;
  end;
end;
end.
