unit Entidade;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls, Vcl.Buttons, Vcl.ComCtrls,
  EntidadeDM, ConsultarEntidadeForm,
  ConsultarEstadoForm, Estado, EstadoDM,
  ConsultarCidadeForm, CidadeDM,
  ConsultarPaisForm, PaisDM,
  ConsultarCEPForm, CEPDM,
  Log, LogDM,
  GlobalUnit, Data.DB, Vcl.Grids, Vcl.DBGrids;

type
  TCadEntidade = class(TForm)
    Pages: TPageControl;
    AcessoPage: TTabSheet;
    CadastroPage: TTabSheet;
    btnAlterar: TButton;
    BtnConsultar: TButton;
    BtnDesistir: TButton;
    BtnExcluir: TButton;
    btnFechar: TButton;
    BtnGravarAlterar: TButton;
    BtnGravarIncluir: TButton;
    btnIncluir: TButton;
    CaptionEndereco: TLabel;
    CBAtivo: TCheckBox;
    CBConsumidorFinal: TCheckBox;
    CBIndIE: TComboBox;
    EdtBairro: TEdit;
    EdtCEP: TEdit;
    EdtCidade: TEdit;
    EdtCodigo: TEdit;
    EdtComplemento: TEdit;
    EdtCPF: TEdit;
    EdtDDD: TEdit;
    EdtEmail: TEdit;
    EdtEstado: TEdit;
    EdtIE: TEdit;
    EdtNome: TEdit;
    EdtNumero: TEdit;
    EdtPais: TEdit;
    EdtRua: TEdit;
    EdtTelefone: TEdit;
    LblAtivo: TLabel;
    lblBairro: TLabel;
    LblCEP: TLabel;
    LblCidade: TLabel;
    lblCodigo: TLabel;
    LblComplemento: TLabel;
    lblConsumidorFinal: TLabel;
    lblCPF: TLabel;
    LblDDD: TLabel;
    lblEmail: TLabel;
    LblEstado: TLabel;
    lblIE: TLabel;
    lblIndicadorIE: TLabel;
    lblNome: TLabel;
    lblNumero: TLabel;
    LblPais: TLabel;
    lblRua: TLabel;
    LblTelefone: TLabel;
    SBCEP: TSpeedButton;
    lblAcessoCodigo: TLabel;
    SBConsEntidade: TSpeedButton;
    RGAcessoAtivo: TRadioGroup;
    EdtAcessoCodigo: TEdit;
    EdtAcessoNome: TEdit;
    btnAcessoFechar: TButton;
    btnAcessoConsultar: TButton;
    AcessoGrid: TDBGrid;
    lblAcessoIndIE: TLabel;
    CBAcessoIndIE: TComboBox;
    lblAcessoEstado: TLabel;
    EdtAcessoSiglaEstado: TEdit;
    EdtAcessoEstado: TEdit;
    SBConsEstado: TSpeedButton;
    lblAcessoPais: TLabel;
    EdtAcessoSiglaPais: TEdit;
    EdtAcessoPais: TEdit;
    SBConsPais: TSpeedButton;
    lblAcessoCEP: TLabel;
    EdtAcessoCodigoCEP: TEdit;
    EdtAcessoCEP: TEdit;
    SBConsCEP: TSpeedButton;
    lblAcessoCidade: TLabel;
    EdtAcessoCodigoCidade: TEdit;
    EdtAcessoCidade: TEdit;
    SBConsCidade: TSpeedButton;
    RGAcessoConsumidor_Final: TRadioGroup;
    lblCNPJ: TLabel;
    EdtCNPJ: TEdit;
    CBTipo: TComboBox;
    lblTipo: TLabel;
    SBAcessoClearIndIE: TSpeedButton;
    procedure btnIncluirClick(Sender: TObject);
    procedure BtnDesistirClick(Sender: TObject);
    procedure BtnGravarIncluirClick(Sender: TObject);
    procedure BtnGravarAlterarClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure BtnExcluirClick(Sender: TObject);
    procedure BtnConsultarClick(Sender: TObject);
    procedure SBCEPClick(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);
    procedure SBConsCEPClick(Sender: TObject);
    procedure SBConsPaisClick(Sender: TObject);
    procedure SBConsCidadeClick(Sender: TObject);
    procedure SBConsEstadoClick(Sender: TObject);
    procedure SBConsEntidadeClick(Sender: TObject);
    procedure EdtAcessoSiglaEstadoExit(Sender: TObject);
    procedure EdtAcessoCodigoExit(Sender: TObject);
    procedure EdtAcessoCodigoCidadeExit(Sender: TObject);
    procedure EdtAcessoSiglaPaisExit(Sender: TObject);
    procedure EdtAcessoCodigoCEPExit(Sender: TObject);
    procedure btnAcessoConsultarClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure CBTipoChange(Sender: TObject);
    procedure EdtCEPExit(Sender: TObject);
    procedure SBAcessoClearIndIEClick(Sender: TObject);
    procedure CBAcessoIndIEDropDown(Sender: TObject);
    procedure EdtCNPJExit(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  CadEntidade: TCadEntidade;

implementation

{$R *.dfm}

procedure TCadEntidade.FormShow(Sender: TObject);
begin
 CBTipo.ItemIndex := 0;
 lblCNPJ.Visible := False;
 EdtCNPJ.Visible := False;
 LblIE.Visible := False;
 EdtIE.Visible := False;
 lblIndicadorIE.Visible := False;
 CBIndIE.Visible := False;

 lblCPF.Visible := True;
 EdtCPF.Visible := True;
end;

procedure TCadEntidade.CBTipoChange(Sender: TObject);
begin
 if CBTipo.ItemIndex = 0 then begin
  lblCNPJ.Visible := False;
  EdtCNPJ.Visible := False;
  LblIE.Visible := False;
  EdtIE.Visible := False;
  lblIndicadorIE.Visible := False;
  CBIndIE.Visible := False;
  lblCPF.Visible := True;
  EdtCPF.Visible := True;
 end;
 if CBTipo.ItemIndex = 1 then begin
  lblCNPJ.Visible := True;
  EdtCNPJ.Visible := True;
  LblIE.Visible := True;
  EdtIE.Visible := True;
  lblIndicadorIE.Visible := True;
  CBIndIE.Visible := True;

  lblCPF.Visible := False;
  EdtCPF.Visible := False;
 end;
end;

procedure TCadEntidade.btnIncluirClick(Sender: TObject);
begin
 btnIncluir.Visible := False;
 btnAlterar.Visible := False;
 btnExcluir.Visible := False;
 btnConsultar.Visible := False;

 btnGravarIncluir.Visible := True;
 btnDesistir.Visible := True;

 EdtCodigo.Clear;
 EdtNome.Clear;
 EdtCPF.Clear;
 EdtCNPJ.Clear;
 EdtDDD.Clear;
 EdtTelefone.Clear;
 EdtRua.Clear;
 EdtNumero.Clear;
 EdtEstado.Clear;
 EdtBairro.Clear;
 EdtCidade.Clear;
 EdtPais.Clear;
 EdtComplemento.Clear;
 EdtCEP.Clear;
 EdtEmail.Clear;
 EdtIE.Clear;

 EdtCodigo.Enabled := True;
 EdtNome.Enabled := True;
 EdtCPF.Enabled := True;
 EdtCNPJ.Enabled := True;
 EdtDDD.Enabled := True;
 EdtTelefone.Enabled := True;
 EdtRua.Enabled := True;
 EdtNumero.Enabled := True;
 EdtBairro.Enabled := True;
 EdtEmail.Enabled := True;
 EdtComplemento.Enabled := True;
 EdtCEP.Enabled := True;
 SBCEP.Enabled := True;
 CBConsumidorFinal.Enabled := True;
 CBAtivo.Enabled := True;
 CBIndIE.Enabled := True;
 CBTipo.Enabled := True;
 EdtIE.Enabled := True;
end;

procedure TCadEntidade.BtnGravarIncluirClick(Sender: TObject);
var codigo, nome, ativo, cpf, cnpj, ddd, telefone, consumidor_final, rua, numero, estado, bairro, cidade, pais, complemento, cep, email, indIe, IE,
    tipo: string;
begin
 if CBAtivo.Checked then ativo := 'S' else ativo := 'N';
 if CBConsumidorFinal.Checked then consumidor_final := 'S' else consumidor_final := 'N';
 codigo := Edtcodigo.Text;
 nome := EdtNome.Text;
 cpf := Edtcpf.Text;
 cnpj := EdtCNPJ.Text;
 ddd := Edtddd.Text;
 telefone := Edttelefone.Text;
 rua := Edtrua.Text;
 numero := Edtnumero.Text;
 estado := Edtestado.Text;
 bairro := Edtbairro.Text;
 cidade := Edtcidade.Text;
 pais := Edtpais.Text;
 complemento := Edtcomplemento.Text;
 cep := Edtcep.Text;
 email := EdtEmail.Text;
 IE := EdtIE.Text;
 if CBTipo.ItemIndex = 0 then Tipo := '1';
 if CBTipo.ItemIndex = 1 then Tipo := '2';

 if CBTipo.ItemIndex = 0 then IndIE := '9'
 else if CBIndIE.ItemIndex = 0 then IndIE := '1'
 else if CBIndIE.ItemIndex = 1 then IndIE := '2'
 else if CBIndIE.ItemIndex = 2 then IndIE := '9'
 else if CBIndIE.Text = '' then IndIE := '9';

 if CBTipo.ItemIndex = 0 then begin
   if EdtCPF.Text = '' then begin
    ShowMessage('CPF não pode ser vazio!');
    Abort;
   end;
    if Length(EdtCPF.Text) <> 11 then begin
     ShowMessage('CPF precisa ter 11 dígitos!');
     Abort;
    end;
 end;

 if CBTipo.ItemIndex = 1 then begin
  if EdtCNPJ.Text = '' then begin
    ShowMessage('CNPJ não pode ser vazio!');
    Abort;
  end;
   if CBIndIE.Text = '' then begin
    ShowMessage('Indicador da IE não pode ser vazio!');
    Abort;
   end;
    if (CBIndIE.ItemIndex = 0) and (EdtIE.Text = '') then begin
     ShowMessage('IE não pode ser vazio!');
     Abort;
    end;
     if Length(EdtCNPJ.Text) <> 14 then begin
      ShowMessage('CNPJ precisa ter 14 dígitos!');
     end;
 end;

  if EdtCodigo.Text = '' then begin
   ShowMessage('Código não pode ser vazio!');
   Abort;
  end;

  if EdtNome.Text = '' then begin
   ShowMessage('Nome não pode ser vazio!');
   Abort;
  end;

  if EdtDDD.Text = '' then begin
   ShowMessage('DDD não pode ser vazio!');
   Abort;
  end;

  if EdtTelefone.Text = '' then begin
   ShowMessage('Telefone não pode ser vazio!');
   Abort;
  end;

  if EdtRua.Text = '' then begin
   ShowMessage('Rua não pode ser vazia!');
   Abort;
  end;

  if EdtNumero.Text = '' then begin
   ShowMessage('Numero não pode ser vazio!');
   Abort;
  end;

  if EdtEstado.Text = '' then begin
   ShowMessage('Estado não pode ser vazio!');
   Abort;
  end;

  if EdtBairro.Text = '' then begin
   ShowMessage('Bairro não pode ser vazio!');
   Abort;
  end;

  if EdtCidade.Text = '' then begin
   ShowMessage('Cidade não pode ser vazia!');
   Abort;
  end;

  if EdtPais.Text = '' then begin
   ShowMessage('País não pode ser vazio!');
   Abort;
  end;

  if EdtComplemento.Text = '' then begin
   ShowMessage('Complemento não pode ser vazio!');
   Abort;
  end;

  if EdtCEP.Text = '' then begin
   ShowMessage('CEP não pode ser vazio!');
   Abort;
  end;

  if EdtEmail.Text = '' then begin
  ShowMessage('Email não pode ser  vazio!');
  Exit;
  end;

 CadEntidadeDM.SelectQuery.Close;
 CadEntidadeDM.SelectQuery.SQL.Clear;
 CadEntidadeDM.SelectQuery.SQL.Text :=
 'SELECT * FROM CADENTIDADE Where codigo = :codigo';
 CadEntidadeDM.SelectQuery.Parambyname('codigo').AsString := codigo;
 CadEntidadeDM.SelectQuery.Open;

 if not CadEntidadeDM.SelectQuery.IsEmpty then begin
  ShowMessage('Entidade já cadastrada!');
  Abort;
 end;

 CadEntidadeDM.InsertQuery.Close;
 CadEntidadeDM.InsertQuery.SQL.Clear;
 CadEntidadeDM.InsertQuery.SQL.TEXT :=
 'INSERT INTO CADENTIDADE' +
 '(codigo, nome, ativo, cpf, ddd, telefone, consumidor_final, rua, numero, estado, bairro, cidade, pais, complemento, cep, email, indIe, IE, Tipo) ' +
 'values' +
 '(:codigo, :nome, :ativo, :cpf, :ddd, :telefone, :consumidor_final, :rua, :numero, :estado, :bairro, :cidade, :pais, :complemento, :cep, :email, :indIe, :IE, :Tipo)';
 CadEntidadeDM.InsertQuery.Parambyname('codigo').AsString := codigo;
 CadEntidadeDM.InsertQuery.Parambyname('nome').AsString := nome;
 if tipo = '1' then CadEntidadeDM.InsertQuery.Parambyname('cpf').AsString := cpf;
 if tipo = '2' then CadEntidadeDM.InsertQuery.Parambyname('cpf').AsString := cnpj;
 CadEntidadeDM.InsertQuery.Parambyname('ativo').AsString := ativo;
 CadEntidadeDM.InsertQuery.Parambyname('ddd').AsString := ddd;
 CadEntidadeDM.InsertQuery.Parambyname('telefone').AsString := telefone;
 CadEntidadeDM.InsertQuery.Parambyname('consumidor_final').AsString := consumidor_final;
 CadEntidadeDM.InsertQuery.Parambyname('rua').AsString := rua;
 CadEntidadeDM.InsertQuery.Parambyname('numero').AsString := numero;
 CadEntidadeDM.InsertQuery.Parambyname('estado').AsString := estado;
 CadEntidadeDM.InsertQuery.Parambyname('bairro').AsString := bairro;
 CadEntidadeDM.InsertQuery.Parambyname('cidade').AsString := cidade;
 CadEntidadeDM.InsertQuery.Parambyname('pais').AsString := pais;
 CadEntidadeDM.InsertQuery.Parambyname('complemento').AsString := complemento;
 CadEntidadeDM.InsertQuery.Parambyname('cep').AsString := cep;
 CadEntidadeDM.InsertQuery.Parambyname('email').AsString := email;
 if tipo = '1' then CadEntidadeDM.InsertQuery.Parambyname('IE').AsString := '';
 if tipo = '2' then CadEntidadeDM.InsertQuery.Parambyname('IE').AsString := IE;
 CadEntidadeDM.InsertQuery.Parambyname('indIE').AsString := IndIE;
 CadEntidadeDM.InsertQuery.ParamByName('Tipo').AsString := Tipo;

 LogsDM.InserirLog.SQL.Clear;
 LogsDM.InserirLog.SQL.Text :=
 'insert into logs (descricao, tela, data, emp_id, usuario) values (:descricao, :tela, :data, :emp_id, :usuario)';
 LogsDM.InserirLog.ParamByName('descricao').AsString :=
 'Inseriu a entidade ' + nome + ' no código ' + codigo + ' no CPF ' + cpf + ' no DDD ' + DDD + ' no telefone ' + telefone + ' na rua ' + rua +
 ' no número ' + numero + ' no estado ' + estado + ' no bairro ' + bairro + ' na cidade ' + cidade + ' no país ' + pais + ' no CEP ' + CEP +
 ' com complemento ' + complemento + ', ativo ' + ativo + '  e consumidor final ' + consumidor_final + ' no email ' + email;
 LogsDM.InserirLog.ParamByName('tela').AsString := 'CadEntidade';
 LogsDM.InserirLog.ParamByName('data').AsDatetime := Now;
 LogsDM.InserirLog.ParamByName('usuario').AsString := UsuarioLogado;
 LogsDM.InserirLog.ParamByName('emp_id').AsString := EmpresaLogada;
  try
  CadEntidadeDM.InsertQuery.ExecSQL;
  LogsDM.InserirLog.ExecSQL;
  ShowMessage('Gravado com sucesso!');
  btnIncluir.Visible := True;
  btnAlterar.Visible := True;
  btnExcluir.Visible := True;
  btnConsultar.Visible := True;

  btnGravarIncluir.Visible := False;
  btnDesistir.Visible := False;

  EdtCodigo.Enabled := False;
  EdtNome.Enabled := False;
  EdtCPF.Enabled := False;
  EdtCNPJ.Enabled := False;
  EdtDDD.Enabled := False;
  EdtTelefone.Enabled := False;
  EdtRua.Enabled := False;
  EdtNumero.Enabled := False;
  EdtEstado.Enabled := False;
  EdtBairro.Enabled := False;
  EdtCidade.Enabled := False;
  EdtPais.Enabled := False;
  EdtComplemento.Enabled := False;
  EdtCEP.Enabled := False;
  EdtEmail.Enabled := False;
  EdtIE.Enabled := False;

  CBConsumidorFinal.Enabled := False;
  CBAtivo.Enabled := False;
  CBIndIE.Enabled := False;
  CBTipo.Enabled := False;
  SBCEP.Enabled := False;
  except
  ShowMessage('Erro na gravação!');
  end;
end;

procedure TCadEntidade.btnAlterarClick(Sender: TObject);
begin
 if EdtCodigo.Text = '' then begin
  ShowMessage('Nenhuma entidade selecionada!')
 end
 else begin
  btnIncluir.Visible := False;
  btnAlterar.Visible := False;
  btnExcluir.Visible := False;
  btnConsultar.Visible := False;
  btnGravarIncluir.Visible := False;

  btnGravarAlterar.Visible := True;
  btnDesistir.Visible := True;
  SBCEP.Enabled := True;

  EdtNome.Enabled := True;
  EdtDDD.Enabled := True;
  EdtTelefone.Enabled := True;
  EdtIE.Enabled := True;
  CBConsumidorFinal.Enabled := True;
  CBAtivo.Enabled := True;
  CBIndIE.Enabled := True;
  EdtRua.Enabled := True;
  EdtNumero.Enabled := True;
  EdtBairro.Enabled := True;
  EdtComplemento.Enabled := True;
  EdtCEP.Enabled := True;
  EdtEmail.Enabled := True;
 end;
end;

procedure TCadEntidade.btnGravarAlterarClick(Sender: TObject);
var codigo, nome, ativo, cpf, cnpj, ddd, telefone, consumidor_final, rua, numero, estado, bairro, cidade, pais, complemento, cep, email, indIe, IE,
Tipo: string;
begin
 if CBAtivo.Checked then ativo := 'S' else ativo := 'N';
 if CBConsumidorFinal.Checked then consumidor_final := 'S' else consumidor_final := 'N';
 codigo := Edtcodigo.Text;
 nome := EdtNome.Text;
 cpf := Edtcpf.Text;
 cnpj := EdtCNPJ.Text;
 ddd := Edtddd.Text;
 telefone := Edttelefone.Text;
 rua := Edtrua.Text;
 numero := Edtnumero.Text;
 estado := Edtestado.Text;
 bairro := Edtbairro.Text;
 cidade := Edtcidade.Text;
 pais := Edtpais.Text;
 complemento := Edtcomplemento.Text;
 cep := Edtcep.Text;
 email := EdtEmail.text;
 IE := EdtIE.Text;
 if CBTipo.ItemIndex = 0 then Tipo := '1';
 if CBTipo.ItemIndex = 1 then Tipo := '2';

 if CBTipo.ItemIndex = 0 then IndIE := '9'
 else if CBIndIE.ItemIndex = 0 then IndIE := '1'
 else if CBIndIE.ItemIndex = 1 then IndIE := '2'
 else if CBIndIE.ItemIndex = 2 then IndIE := '9'
 else if CBIndIE.Text = '' then IndIE := '9';

 if CBTipo.ItemIndex = 0 then begin
   if EdtCPF.Text = '' then begin
    ShowMessage('CPF não pode ser vazio!');
    Abort;
   end;
 end;

 if CBTipo.ItemIndex = 1 then begin
  if EdtCNPJ.Text = '' then begin
    ShowMessage('CNPJ não pode ser vazio!');
    Abort;
  end;
   if CBIndIE.Text = '' then begin
    ShowMessage('Indicador da IE não pode ser vazio!');
    Abort;
   end;
    if (CBIndIE.Text = '1 - Contribuinte ICMS (possui IE)') and (EdtIE.Text = '') then begin
     ShowMessage('IE não pode ser vazio!');
     Abort;
    end;
 end;

  if EdtCodigo.Text = '' then begin
   ShowMessage('Código não pode ser vazio!');
   Abort;
  end;

  if EdtNome.Text = '' then begin
   ShowMessage('Nome não pode ser vazio!');
   Abort;
  end;

  if EdtDDD.Text = '' then begin
   ShowMessage('DDD não pode ser vazio!');
   Abort;
  end;

  if EdtTelefone.Text = '' then begin
   ShowMessage('Telefone não pode ser vazio!');
   Abort;
  end;

  if EdtRua.Text = '' then begin
   ShowMessage('Rua não pode ser vazia!');
   Abort;
  end;

  if EdtNumero.Text = '' then begin
   ShowMessage('Numero não pode ser vazio!');
   Abort;
  end;

  if EdtEstado.Text = '' then begin
   ShowMessage('Estado não pode ser vazio!');
   Abort;
  end;

  if EdtBairro.Text = '' then begin
   ShowMessage('Bairro não pode ser vazio!');
   Abort;
  end;

  if EdtCidade.Text = '' then begin
   ShowMessage('Cidade não pode ser vazia!');
   Abort;
  end;

  if EdtPais.Text = '' then begin
   ShowMessage('País não pode ser vazio!');
   Abort;
  end;

  if EdtComplemento.Text = '' then begin
   ShowMessage('Complemento não pode ser vazio!');
   Abort;
  end;

  if EdtCEP.Text = '' then begin
   ShowMessage('CEP não pode ser vazio!');
   Abort;
  end;

  if EdtEmail.Text = '' then begin
   ShowMessage('Email não pode ser  vazio!');
   Abort;
  end;

 CadEntidadeDM.UpdateQuery.Close;
 CadEntidadeDM.UpdateQuery.SQL.Clear;
 CadEntidadeDM.UpdateQuery.SQL.TEXT :=
 'update CADENTIDADE set nome = :nome, ativo = :ativo, cpf = :cpf, ddd = :ddd, telefone = :telefone, consumidor_final = :consumidor_final, indIe = :indIe, IE = :IE, ' +
 'rua = :rua, numero = :numero, estado = :estado, bairro = :bairro, cidade = :cidade, pais = :pais, complemento = :complemento, cep = :cep, email = :email, ' +
 'tipo = :tipo ' +
 'where codigo = :codigo';
 CadEntidadeDM.UpdateQuery.Parambyname('codigo').AsString := codigo;
 CadEntidadeDM.UpdateQuery.Parambyname('nome').AsString := nome;
 if cpf <> '' then CadEntidadeDM.UpdateQuery.Parambyname('cpf').AsString := cpf;
 if cnpj <> '' then CadEntidadeDM.UpdateQuery.Parambyname('cpf').AsString := cnpj;
 CadEntidadeDM.UpdateQuery.Parambyname('ativo').AsString := ativo;
 CadEntidadeDM.UpdateQuery.Parambyname('ddd').AsString := ddd;
 CadEntidadeDM.UpdateQuery.Parambyname('telefone').AsString := telefone;
 CadEntidadeDM.UpdateQuery.Parambyname('consumidor_final').AsString := consumidor_final;
 CadEntidadeDM.UpdateQuery.Parambyname('rua').AsString := rua;
 CadEntidadeDM.UpdateQuery.Parambyname('numero').AsString := numero;
 CadEntidadeDM.UpdateQuery.Parambyname('estado').AsString := estado;
 CadEntidadeDM.UpdateQuery.Parambyname('bairro').AsString := bairro;
 CadEntidadeDM.UpdateQuery.Parambyname('cidade').AsString := cidade;
 CadEntidadeDM.UpdateQuery.Parambyname('pais').AsString := pais;
 CadEntidadeDM.UpdateQuery.Parambyname('complemento').AsString := complemento;
 CadEntidadeDM.UpdateQuery.Parambyname('cep').AsString := cep;
 CadEntidadeDM.UpdateQuery.Parambyname('email').AsString := email;
 CadEntidadeDM.UpdateQuery.Parambyname('IE').AsString := IE;
 CadEntidadeDM.UpdateQuery.Parambyname('IndIE').AsString := IndIE;
 CadEntidadeDM.UpdateQuery.Parambyname('tipo').AsString := tipo;

 LogsDM.InserirLog.SQL.Clear;
 LogsDM.InserirLog.SQL.Text :=
 'insert into logs (descricao, tela, data, emp_id, usuario) values (:descricao, :tela, :data, :emp_id, :usuario)';
 LogsDM.InserirLog.ParamByName('descricao').AsString :=
 'Alterou a entidade ' + nome + ' no código ' + codigo + ' no CPF ' + cpf + ' no DDD ' + DDD + ' no telefone ' + telefone + ' na rua ' + rua +
 ' no número ' + numero + ' no estado ' + estado + ' no bairro ' + bairro + ' na cidade ' + cidade + ' no país ' + pais + ' no CEP ' + CEP +
 ' com complemento ' + complemento + ', ativo ' + ativo + '  e consumidor final ' + consumidor_final + ' e email ' + email;
 LogsDM.InserirLog.ParamByName('tela').AsString := 'CadEntidade';;
 LogsDM.InserirLog.ParamByName('data').AsDatetime := Now;
 LogsDM.InserirLog.ParamByName('usuario').AsString := UsuarioLogado;
 LogsDM.InserirLog.ParamByName('emp_id').AsString := EmpresaLogada;

 try
  CadEntidadeDM.UpdateQuery.ExecSQL;
  LogsDM.InserirLog.ExecSQL;
  ShowMessage('Gravado com sucesso!');

  btnIncluir.Visible := True;
  btnAlterar.Visible := True;
  btnExcluir.Visible := True;
  btnConsultar.Visible := True;

  btnGravarIncluir.Visible := False;
  btnGravarAlterar.Visible := False;
  btnDesistir.Visible := False;

  EdtNome.Enabled := False;
  EdtCPF.Enabled := False;
  EdtCNPJ.Enabled := False;
  EdtDDD.Enabled := False;
  EdtTelefone.Enabled := False;
  EdtRua.Enabled := False;
  EdtNumero.Enabled := False;
  EdtEstado.Enabled := False;
  EdtBairro.Enabled := False;
  EdtCidade.Enabled := False;
  EdtPais.Enabled := False;
  EdtComplemento.Enabled := False;
  EdtCEP.Enabled := False;
  EdtEmail.Enabled := False;
  EdtIE.Enabled := False;

  CBConsumidorFinal.Enabled := False;
  CBAtivo.Enabled := False;
  CBIndIE.Enabled := False;
  CBTipo.Enabled := False;
  SBCEP.Enabled := False;
  except
  ShowMessage('Erro na gravação!');
 end;
end;

procedure TCadEntidade.BtnConsultarClick(Sender: TObject);
var codigo, nome, ativo, cpf, ddd, telefone, rua, numero, estado, bairro, cidade, pais, complemento, cep, consumidor_final, email, IndIE, IE,
    Tipo: string;
begin
 CadEntidadeDM.ConsultarEntidade.Close;
 CadEntidadeDM.ConsultarEntidade.SQL.Clear;
 CadEntidadeDM.ConsultarEntidade.SQL.Text :=
 'select * from cadentidade';
 CadEntidadeDM.ConsultarEntidade.Open;
 Application.CreateForm(TConsultarEntidade, ConsultarEntidade);

 codigo := ConsultarEntidade.SelecionarEntidade;

 Nome := ConsultarEntidade.nome;
 CPF := ConsultarEntidade.CPF;
 DDD := ConsultarEntidade.DDD;
 Telefone := ConsultarEntidade.Telefone;
 Rua := ConsultarEntidade.Rua;
 Numero := ConsultarEntidade.Numero;
 Estado := ConsultarEntidade.Estado;
 Bairro := ConsultarEntidade.Bairro;
 Cidade := ConsultarEntidade.Cidade;
 Pais := ConsultarEntidade.Pais;
 Complemento := ConsultarEntidade.Complemento;
 CEP := ConsultarEntidade.CEP;
 Consumidor_Final := ConsultarEntidade.Consumidor_Final;
 Ativo := ConsultarEntidade.Ativo;
 email := ConsultarEntidade.Email;
 IE := ConsultarEntidade.IE;
 IndIE := ConsultarEntidade.IndIE;
 Tipo := ConsultarEntidade.Tipo;
 EdtCodigo.Text := codigo;
 EdtNome.Text := nome;
 if Length(CPF) = 14 then begin
 CBTipo.ItemIndex := 1;
 lblCNPJ.Visible := True;
 EdtCNPJ.Visible := True;
 lblIE.Visible := True;
 EdtIE.Visible := True;
 lblIndicadorIE.Visible := True;
 CBIndIE.Visible := True;
 if IndIE = '1' then CBIndIE.ItemIndex := 0;
 if IndIE = '2' then CBIndIE.ItemIndex := 1;
 if IndIE = '9' then CBIndIE.ItemIndex := 2;

 lblCPF.Visible := False;
 EdtCPF.Visible := False;
 EdtCPF.Clear;

 EdtCNPJ.Text := cpf;
 end;
 if Length(CPF) = 11 then begin
 CBTipo.ItemIndex := 0;
 lblCNPJ.Visible := False;
 EdtCNPJ.Visible := False;
 EdtCNPJ.Clear;
 lblIE.Visible := False;
 EdtIE.Visible := False;
 EdtIE.Clear;
 lblIndicadorIE.Visible := False;
 CBIndIE.Visible := False;

 lblCPF.Visible := True;
 EdtCPF.Visible := True;

 EdtCPF.Text := cpf;
 end;

 EdtDDD.Text := DDD;
 EdtTelefone.Text := Telefone;
 EdtRua.Text := Rua;
 EdtNumero.Text := numero;
 EdtEstado.Text := Estado;
 EdtBairro.Text := Bairro;
 EdtCidade.Text := Cidade;
 EdtPais.Text := Pais;
 EdtCEP.Text := CEP;
 EdtEmail.Text := Email;
 EdtComplemento.Text := Complemento;
 EdtIE.Text := IE;
 CBAtivo.Checked := Ativo = 'S';
 CBConsumidorFinal.Checked := Consumidor_final = 'S';
 if IndIE = '1' then CBIndIE.ItemIndex := 0
 else if IndIE = '2' then CBIndIE.ItemIndex := 1
 else if IndIE = '9' then CBIndIE.ItemIndex := 2;
 if Tipo = '1' then CBTipo.ItemIndex := 0
 else if Tipo = '2' then CBTipo.ItemIndex := 1
end;

procedure TCadEntidade.BtnDesistirClick(Sender: TObject);
begin
 btnIncluir.Visible := True;
 btnAlterar.Visible := True;
 btnExcluir.Visible := True;
 btnConsultar.Visible := True;

 btnGravarIncluir.Visible := False;
 BtnGravarAlterar.Visible := False;
 btnDesistir.Visible := False;

 EdtCodigo.Enabled := False;
 EdtNome.Enabled := False;
 EdtCPF.Enabled := False;
 EdtCNPJ.Enabled := False;
 EdtDDD.Enabled := False;
 EdtTelefone.Enabled := False;
 EdtRua.Enabled := False;
 EdtNumero.Enabled := False;
 EdtEstado.Enabled := False;
 EdtBairro.Enabled := False;
 EdtCidade.Enabled := False;
 EdtPais.Enabled := False;
 EdtComplemento.Enabled := False;
 EdtCEP.Enabled := False;
 EdtIE.Enabled := False;
 EdtEmail.Enabled := False;

 CBConsumidorFinal.Enabled := False;
 CBAtivo.Enabled := False;
 CBIndIE.Enabled := False;
 CBTipo.Enabled := False;
 SBCEP.Enabled := False;

 EdtCodigo.Clear;
 EdtNome.Clear;
 EdtCPF.Clear;
 EdtDDD.Clear;
 EdtTelefone.Clear;
 EdtRua.Clear;
 EdtNumero.Clear;
 EdtEstado.Clear;
 EdtBairro.Clear;
 EdtCidade.Clear;
 EdtPais.Clear;
 EdtComplemento.Clear;
 EdtCEP.Clear;
 EdtIE.Clear;
end;

procedure TCadEntidade.BtnExcluirClick(Sender: TObject);
var codigo, nome, ativo, cpf, ddd, telefone, consumidor_final, rua, numero, estado, bairro, cidade, pais, complemento, cep: string;
begin
 if CBAtivo.Checked then ativo := 'S'
 else ativo := 'N';
 if CBConsumidorFinal.Checked then consumidor_final := 'S'
 else consumidor_final := 'N';
 codigo := Edtcodigo.Text;
 nome := EdtNome.Text;
 cpf := Edtcpf.Text;
 ddd := Edtddd.Text;
 telefone := Edttelefone.Text;
 rua := Edtrua.Text;
 numero := Edtnumero.Text;
 estado := Edtestado.Text;
 bairro := Edtbairro.Text;
 cidade := Edtcidade.Text;
 pais := Edtpais.Text;
 complemento := Edtcomplemento.Text;
 cep := Edtcep.Text;

 CadEntidadeDM.SelectQuery.SQL.Clear;
 CadEntidadeDM.SelectQuery.SQL.Text :=
 'SELECT * FROM CADEntidade WHERE CODIGO = :codigo';
 CadEntidadeDM.SelectQuery.ParamByName('codigo').AsString := codigo;
 CadEntidadeDM.SelectQuery.Open;

 if CadEntidadeDM.SelectQuery.IsEmpty then begin
 ShowMessage('Entidade não encontrada!')
 end
 else begin

 CadEntidadeDM.DeleteQuery.SQL.Clear;
 CadEntidadeDM.DeleteQuery.SQL.Text :=
 'delete from cadentidade where codigo = :codigo';
 CadEntidadeDM.DeleteQuery.ParamByName('codigo').AsString := codigo;

 LogsDM.InserirLog.SQL.Clear;
 LogsDM.InserirLog.SQL.Text :=
 'insert into logs (descricao, tela, data, emp_id, usuario) values (:descricao, :tela, :data, :emp_id, :usuario)';
 LogsDM.InserirLog.ParamByName('descricao').AsString :=
 'Excluiu a entidade ' + nome + ' no código ' + codigo + ' no CPF ' + cpf + ' no DDD ' + DDD + ' no telefone ' + telefone + ' na rua ' + rua +
 ' no número ' + numero + ' no estado ' + estado + ' no bairro ' + bairro + ' na cidade ' + cidade + ' no país ' + pais + ' no CEP ' + CEP +
 ' com complemento ' + complemento + ', ativo ' + ativo + '  e consumidor final ' + consumidor_final;
 LogsDM.InserirLog.ParamByName('tela').AsString := 'CadEntidade';
 LogsDM.InserirLog.ParamByName('data').AsDatetime := Now;
 LogsDM.InserirLog.ParamByName('usuario').AsString := UsuarioLogado;
 LogsDM.InserirLog.ParamByName('emp_id').AsString := EmpresaLogada;
  try
  CadEntidadeDM.DeleteQuery.ExecSQL;
  LogsDM.InserirLog.ExecSQL;
  ShowMessage('Excluído com sucesso!');
  EdtCodigo.Clear;
  EdtNome.Clear;
  EdtCPF.Clear;
  EdtCNPJ.Clear;
  EdtDDD.Clear;
  EdtTelefone.Clear;
  EdtRua.Clear;
  EdtNumero.Clear;
  EdtEstado.Clear;
  EdtBairro.Clear;
  EdtCidade.Clear;
  EdtPais.Clear;
  EdtComplemento.Clear;
  EdtCEP.Clear;
  EdtIE.Clear;
  EdtEmail.Clear;
  except
  ShowMessage('Erro na gravação!');
  end;
 end;
end;

procedure TCadEntidade.SBAcessoClearIndIEClick(Sender: TObject);
begin
 CBAcessoIndIE.Clear;
end;

procedure TCadEntidade.SBCEPClick(Sender: TObject);
var CEP, Cidade, Estado, Pais, Codigo: string;
begin
 CadCEPDM.ConsultarCEP.SQL.Clear;
 CadCEPDM.ConsultarCEP.SQL.Text :=
 'select * from cadcep where ativo = :ativo';
 CadCEPDM.ConsultarCEP.ParamByName('ativo').AsString := 'S';
 CadCEPDM.ConsultarCEP.Open;

 Application.CreateForm(TConsultarCEP, ConsultarCEP);
 Codigo := ConsultarCEP.SelecionarCEP;
 if codigo <> '' then
 begin
 CEP := ConsultarCEP.CEP;
 EdtCEP.Text := CEP;
 Cidade := ConsultarCEP.Cidade;
 EdtCidade.Text := Cidade;
 Estado := ConsultarCEP.Estado;
 EdtEstado.Text := Estado;
 Pais := ConsultarCEP.Pais;
 EdtPais.Text := Pais;
 end;
end;

procedure TCadEntidade.EdtCEPExit(Sender: TObject);
var CEP: string;
begin
 CEP := EdtCEP.Text;
 CadCEPDM.ConsultarCEP.SQL.Clear;
 CadCEPDM.ConsultarCEP.SQL.Text :=
 'select cidade, estado, pais from cadcep where CEP = :CEP and ativo = :ativo';
 CadCEPDM.ConsultarCEP.ParamByName('ativo').AsString := 'S';
 CadCEPDM.ConsultarCEP.ParamByName('CEP').AsString := CEP;
 CadCEPDM.ConsultarCEP.Open;

 EdtCidade.Text := CadCEPDM.ConsultarCEP.FieldByName('Cidade').AsString;
 EdtPais.Text := CadCEPDM.ConsultarCEP.FieldByName('Pais').AsString;
 EdtEstado.Text := CadCEPDM.ConsultarCEP.FieldByName('Estado').AsString;
end;

procedure TCadEntidade.EdtCNPJExit(Sender: TObject);
begin
 CadEntidadeDM.SelectQuery.SQL.Clear;
 CadEntidadeDM.SelectQuery.SQL.Text :=
 'select * from cadentidade where CPF = :CPF';
 CadEntidadeDM.SelectQuery.ParamByName('CPF').AsString := EdtCNPJ.Text;
 CadEntidadeDM.SelectQuery.Open;

 if not CadEntidadeDM.SelectQuery.IsEmpty then begin
  ShowMessage('CNPJ já cadastrado! Redirecionando para o cadastro da entidade com esse CNPJ ' + '(' + EdtCNPJ.Text + ')');
  EdtCodigo.Text := CadEntidadeDM.SelectQuery.FieldByName('codigo').AsString;
  EdtNome.Text := CadEntidadeDM.SelectQuery.FieldByName('nome').AsString;
  if CadEntidadeDM.SelectQuery.FieldByName('ativo').AsString = 'S' then CBAtivo.Checked := True;;
  EdtCNPJ.Text := CadEntidadeDM.SelectQuery.FieldByName('CPF').AsString;
  EdtDDD.Text := CadEntidadeDM.SelectQuery.FieldByName('DDD').AsString;
  Edttelefone.Text := CadEntidadeDM.SelectQuery.FieldByName('telefone').AsString;
  if CadEntidadeDM.SelectQuery.FieldByName('consumidor_final').AsString = 'S' then CBConsumidorFinal.Checked := True;
  Edtnumero.Text := CadEntidadeDM.SelectQuery.FieldByName('numero').AsString;
  EdtRua.Text := CadEntidadeDM.SelectQuery.FieldByName('Rua').AsString;
  EdtEstado.Text := CadEntidadeDM.SelectQuery.FieldByName('Estado').AsString;
  EdtBairro.Text := CadEntidadeDM.SelectQuery.FieldByName('Bairro').AsString;
  EdtCidade.Text := CadEntidadeDM.SelectQuery.FieldByName('Cidade').AsString;
  EdtPais.Text := CadEntidadeDM.SelectQuery.FieldByName('Pais').AsString;
  EdtComplemento.Text := CadEntidadeDM.SelectQuery.FieldByName('Complemento').AsString;
  EdtCEP.Text := CadEntidadeDM.SelectQuery.FieldByName('CEP').AsString;
  EdtEmail.Text := CadEntidadeDM.SelectQuery.FieldByName('Email').AsString;
  EdtIE.Text := CadEntidadeDM.SelectQuery.FieldByName('IE').AsString;
  if CadEntidadeDM.SelectQuery.FieldByName('IndIE').AsString = '1' then CBIndIE.ItemIndex := 0;
  if CadEntidadeDM.SelectQuery.FieldByName('IndIE').AsString = '2' then CBIndIE.ItemIndex := 1;
  if CadEntidadeDM.SelectQuery.FieldByName('IndIE').AsString = '9' then CBIndIE.ItemIndex := 3;
 end;

end;

procedure TCadEntidade.btnAcessoConsultarClick(Sender: TObject);
var codigo, estado, cidade, pais, cep: string;
    temwhere: boolean;
    I: integer;
begin
 codigo := EdtAcessoCodigo.Text;
 Estado := EdtAcessoSiglaEstado.Text;
 Cidade := EdtAcessoCidade.Text;
 Pais := EdtAcessoSiglaPais.Text;
 cep := EdtAcessoCEP.Text;

 CadEntidadeDM.AcessoQuery.SQL.Clear;
 CadEntidadeDM.AcessoQuery.SQL.Text :=
 'select * from cadentidade';
 temwhere := false;

 if EdtAcessoCodigoCEP.Text <> '' then begin
  if temwhere then begin
   CadEntidadeDM.AcessoQuery.SQL.Add('and CEP = :CEP');
  end
  else begin
   CadEntidadeDM.AcessoQuery.SQL.Add('where CEP = :CEP');
   temwhere := true;
  end;
 CadEntidadeDM.AcessoQuery.ParamByName('CEP').AsString := CEP;
 end;

 if codigo <> '' then begin
  if temwhere then begin
   CadEntidadeDM.AcessoQuery.SQL.Add('and codigo = :codigo');
  end
  else begin
   CadEntidadeDM.AcessoQuery.SQL.Add('where codigo = :codigo');
   temwhere := true;
  end;
 CadEntidadeDM.AcessoQuery.ParamByName('codigo').AsString := codigo;
 end;

 if estado <> '' then begin
  if temwhere then begin
   CadEntidadeDM.AcessoQuery.SQL.Add('and estado = :estado');
  end
  else begin
   CadEntidadeDM.AcessoQuery.SQL.Add('where estado = :estado');
   temwhere := true;
  end;
 CadEntidadeDM.AcessoQuery.ParamByName('estado').AsString := estado;
 end;

 if EdtAcessoCodigoCidade.Text <> '' then begin
  if temwhere then begin
   CadEntidadeDM.AcessoQuery.SQL.Add('and cidade = :cidade');
  end
  else begin
   CadEntidadeDM.AcessoQuery.SQL.Add('where cidade = :cidade');
   temwhere := true;
  end;
 CadEntidadeDM.AcessoQuery.ParamByName('cidade').AsString := cidade;
 end;

 if pais <> '' then begin
  if temwhere then begin
   CadEntidadeDM.AcessoQuery.SQL.Add('and pais = :pais');
  end
  else begin
   CadEntidadeDM.AcessoQuery.SQL.Add('where pais = :pais');
   temwhere := true;
  end;
 CadEntidadeDM.AcessoQuery.ParamByName('pais').AsString := pais;
 end;

 if RGAcessoAtivo.ItemIndex = 0 then begin
    if temwhere then
     begin
      CadEntidadeDM.AcessoQuery.SQL.Add('and ativo = :ativo');
     end
      else begin
       CadEntidadeDM.AcessoQuery.SQL.Add('where ativo = :ativo');
       temwhere := true;
      end;
    CadEntidadeDM.AcessoQuery.ParamByName('ativo').AsString := 'S';
  end;

  if RGAcessoAtivo.ItemIndex = 1 then begin
     if temwhere then begin
      CadEntidadeDM.AcessoQuery.SQL.Add('and ativo = :ativo');
     end
      else begin
       CadEntidadeDM.AcessoQuery.SQL.Add('where ativo = :ativo');
       temwhere := true;
      end;
    CadEntidadeDM.AcessoQuery.ParamByName('ativo').AsString := 'N';
  end;

  if RGAcessoConsumidor_Final.ItemIndex = 0 then begin
    if temwhere then
     begin
      CadEntidadeDM.AcessoQuery.SQL.Add('and consumidor_final = :consumidor_final');
     end
      else begin
       CadEntidadeDM.AcessoQuery.SQL.Add('where consumidor_final = :consumidor_final');
       temwhere := true;
      end;
    CadEntidadeDM.AcessoQuery.ParamByName('consumidor_final').AsString := 'S';
  end;

  if RGAcessoConsumidor_Final.ItemIndex = 1 then begin
     if temwhere then begin
      CadEntidadeDM.AcessoQuery.SQL.Add('and consumidor_final = :consumidor_final');
     end
      else begin
       CadEntidadeDM.AcessoQuery.SQL.Add('where consumidor_final = :consumidor_final');
       temwhere := true;
      end;
    CadEntidadeDM.AcessoQuery.ParamByName('consumidor_final').AsString := 'N';
  end;

  if CBAcessoIndIE.ItemIndex = 0 then begin
     if temwhere then begin
      CadEntidadeDM.AcessoQuery.SQL.Add('and indIE = :IndIE');
     end
      else begin
       CadEntidadeDM.AcessoQuery.SQL.Add('where indIE = :IndIE');
       temwhere := true;
      end;
    CadEntidadeDM.AcessoQuery.ParamByName('IndIE').AsString := '1';
  end;

  if CBAcessoIndIE.ItemIndex = 1 then begin
     if temwhere then begin
      CadEntidadeDM.AcessoQuery.SQL.Add('and indIE = :IndIE');
     end
      else begin
       CadEntidadeDM.AcessoQuery.SQL.Add('where indIE = :IndIE');
       temwhere := true;
      end;
    CadEntidadeDM.AcessoQuery.ParamByName('IndIE').AsString := '2';
  end;

  if CBAcessoIndIE.ItemIndex = 2 then begin
     if temwhere then begin
      CadEntidadeDM.AcessoQuery.SQL.Add('and indIE = :IndIE');
     end
      else begin
       CadEntidadeDM.AcessoQuery.SQL.Add('where indIE = :IndIE');
       temwhere := true;
      end;
    CadEntidadeDM.AcessoQuery.ParamByName('IndIE').AsString := '9';
  end;
  CadEntidadeDM.AcessoQuery.Open;
  begin
   for i := 0 to AcessoGrid.Columns.Count - 1 do
   AcessoGrid.Columns[i].Width := AcessoGrid.Canvas.TextWidth(AcessoGrid.Columns[i].Title.Caption + '     ');
  end;
end;

procedure TCadEntidade.SBConsCEPClick(Sender: TObject);
var CEP, Codigo: string;
begin
 CadCEPDM.ConsultarCEP.SQL.Clear;
 CadCEPDM.ConsultarCEP.SQL.Text :=
 'select * from cadcep';
 CadCEPDM.ConsultarCEP.Open;

 Application.CreateForm(TConsultarCEP, ConsultarCEP);
 Codigo := ConsultarCEP.SelecionarCEP;
 if codigo <> '' then
 begin
 EdtAcessoCodigoCEP.Text := Codigo;
 CEP := ConsultarCEP.CEP;
 EdtAcessoCEP.Text := CEP;
 end;
end;

procedure TCadEntidade.SBConsCidadeClick(Sender: TObject);
var codigo, cidade: string;
begin
 CadCidadeDM.ConsultarCidade.SQL.Clear;
 CadCidadeDM.ConsultarCidade.SQL.Text :=
 'select * from cadcidade';
 CadCidadeDM.ConsultarCidade.Open;

 Application.CreateForm(TConsultarCidade, ConsultarCidade);
 Codigo := ConsultarCidade.ConsultarCidade;
 if codigo <> '' then begin
  EdtAcessoCodigoCidade.Text := codigo;
  cidade := ConsultarCidade.Cidade;
  EdtAcessoCidade.Text := cidade;
 end;
end;

procedure TCadEntidade.SBConsEntidadeClick(Sender: TObject);
var codigo, nome: string;
begin
 CadEntidadeDM.ConsultarEntidade.SQL.Clear;
 CadEntidadeDM.ConsultarEntidade.SQL.Text :=
 'select * from cadentidade';
 CadEntidadeDM.ConsultarEntidade.Open;
 Application.CreateForm(TConsultarEntidade, ConsultarEntidade);

 codigo := ConsultarEntidade.SelecionarEntidade;
 if codigo <> '' then begin
 EdtAcessoCodigo.Text := codigo;
 Nome := ConsultarEntidade.nome;
 EdtAcessoNome.Text := nome;
 end;
end;

procedure TCadEntidade.SBConsEstadoClick(Sender: TObject);
var codigo, estado, sigla: string;
begin
 CadEstadoDM.ConsultarEstado.SQL.Clear;
 CadEstadoDM.ConsultarEstado.SQL.Text :=
 'select * from cadestado';
 CadEstadoDM.ConsultarEstado.Open;

 Application.CreateForm(TConsultarEstado, ConsultarEstado);
 codigo := ConsultarEstado.SelecionarEstado;
 if codigo <> '' then begin
  sigla := ConsultarEstado.Sigla;
  EdtAcessoSiglaEstado.Text := sigla;
  Estado := ConsultarEstado.Estado;
  EdtAcessoEstado.Text := estado;
 end;
end;

procedure TCadEntidade.SBConsPaisClick(Sender: TObject);
var codigo, sigla, pais: string;
begin
 CadPaisDM.ConsultarPais.SQL.Clear;
 CadPaisDM.ConsultarPais.SQL.Text :=
 'select * from cadpais';
 CadPaisDM.ConsultarPais.Open;

 Application.CreateForm(TConsultarPais, ConsultarPais);
 Codigo := ConsultarPais.SelecionarPais;
 if codigo <> '' then
 begin
  sigla := ConsultarPais.Sigla;
  EdtAcessoSiglaPais.Text := sigla;
  Pais := ConsultarPais.Pais;
  EdtAcessoPais.Text := Pais;
 end;
end;

procedure TCadEntidade.EdtAcessoCodigoCEPExit(Sender: TObject);
var Codigo: string;
begin
 codigo := EdtAcessoCodigoCEP.Text;
 CadCEPDM.ConsultarCEP.SQL.Clear;
 CadCEPDM.ConsultarCEP.SQL.Text :=
 'select * from cadcep where codigo = :codigo';
 CadCEPDM.ConsultarCEP.ParamByName('codigo').AsString := codigo;
 CadCEPDM.ConsultarCEP.Open;

 EdtAcessoCEP.Text := CadCEPDM.ConsultarCEP.FieldByName('CEP').AsString;
end;

procedure TCadEntidade.EdtAcessoCodigoCidadeExit(Sender: TObject);
var codigo: string;
begin
 codigo := EdtAcessoCodigoCidade.Text;
 CadCidadeDM.ConsultarCidade.SQL.Clear;
 CadCidadeDM.ConsultarCidade.SQL.Text :=
 'select * from cadcidade where codigo = :codigo';
 CadCidadeDM.ConsultarCidade.ParamByName('codigo').AsString := codigo;
 CadCidadeDM.ConsultarCidade.Open;

 EdtAcessoCidade.Text := CadCidadeDM.ConsultarCidade.FieldByName('cidade').AsString;
end;

procedure TCadEntidade.EdtAcessoCodigoExit(Sender: TObject);
var codigo: string;
begin
 codigo := EdtAcessoCodigo.Text;
 CadEntidadeDM.ConsultarEntidade.SQL.Clear;
 CadEntidadeDM.ConsultarEntidade.SQL.Text :=
 'select * from cadentidade where codigo = :codigo';
 CadEntidadeDM.ConsultarEntidade.ParamByName('codigo').AsString := codigo;
 CadEntidadeDM.ConsultarEntidade.Open;

 EdtAcessoNome.Text := CadEntidadeDM.ConsultarEntidade.FieldByName('nome').AsString;
end;

procedure TCadEntidade.EdtAcessoSiglaEstadoExit(Sender: TObject);
var estado, sigla: string;
begin
 sigla := EdtAcessoSiglaEstado.Text;
 CadEstadoDM.ConsultarEstado.SQL.Clear;
 CadEstadoDM.ConsultarEstado.SQL.Text :=
 'select * from cadestado where sigla = :sigla';
 CadEstadoDM.ConsultarEstado.ParamByName('sigla').AsString := sigla;
 CadEstadoDM.ConsultarEstado.Open;

 EdtAcessoEstado.Text := CadEstadoDM.ConsultarEstado.FieldByName('estado').AsString;
end;

procedure TCadEntidade.EdtAcessoSiglaPaisExit(Sender: TObject);
var sigla, pais: string;
begin
 sigla := EdtAcessoSiglaPais.Text;
 CadPaisDM.ConsultarPais.SQL.Clear;
 CadPaisDM.ConsultarPais.SQL.Text :=
 'select * from cadpais where sigla = :sigla';
 CadPaisDM.ConsultarPais.ParamByName('sigla').AsString := sigla;
 CadPaisDM.ConsultarPais.Open;

 EdtAcessoPais.Text := CadPaisDM.ConsultarPais.FieldByName('pais').AsString;
end;

procedure TCadEntidade.CBAcessoIndIEDropDown(Sender: TObject);
begin
 CBAcessoIndIE.Items.Clear;
 CBAcessoIndIE.Items.Add('1 - Contribuinte ICMS (possui IE)');
 CBAcessoIndIE.Items.Add('2 - Contribuinte isento de IE');
 CBAcessoIndIE.Items.Add('9 - Não contribuinte');
end;

procedure TCadEntidade.btnFecharClick(Sender: TObject);
begin
 if Parent is TTabSheet then
 Parent.Free;
end;
end.
