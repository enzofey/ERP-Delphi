unit CEP;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.Buttons, Vcl.ComCtrls,
  CidadeDM, ConsultarCidadeForm,
  EstadoDM, ConsultarEstadoForm,
  PaisDM, ConsultarPaisForm,
  CEPDM, ConsultarCEPForm,
  Log, LogDM,
  GlobalUnit, Vcl.Mask, Data.DB, Vcl.Grids, Vcl.DBGrids;

type
  TCadCEP = class(TForm)
    Panel1: TPanel;
    Pages: TPageControl;
    CadastroPage: TTabSheet;
    AcessoPage: TTabSheet;
    btnAlterar: TButton;
    btnConsultar: TButton;
    btnDesistir: TButton;
    btnExcluir: TButton;
    btnFechar: TButton;
    btnGravarAlterar: TButton;
    btnGravarIncluir: TButton;
    btnIncluir: TButton;
    CBAtivo: TCheckBox;
    EdtCEP: TEdit;
    EdtCidade: TEdit;
    EdtCodigo: TEdit;
    EdtEstado: TEdit;
    EdtPais: TEdit;
    lblAtivo: TLabel;
    lblCEP: TLabel;
    lblCidade: TLabel;
    lblCodigo: TLabel;
    lblEstado: TLabel;
    lblPais: TLabel;
    SBCidade: TSpeedButton;
    SBEstado: TSpeedButton;
    SBPais: TSpeedButton;
    EdtSiglaPais: TEdit;
    EdtSiglaEstado: TEdit;
    EdtCodigoCidade: TEdit;
    RGAcessoAtivo: TRadioGroup;
    lblAcessoCEP: TLabel;
    EdtAcessoCodigo: TEdit;
    EdtAcessoCEP: TEdit;
    SBConsCEP: TSpeedButton;
    btnAcessoFechar: TButton;
    btnAcessoConsultar: TButton;
    lblAcessoEstado: TLabel;
    EdtAcessoSiglaEstado: TEdit;
    EdtAcessoEstado: TEdit;
    SBConsEstado: TSpeedButton;
    lblAecssoCidade: TLabel;
    EdtAcessoCodigoCidade: TEdit;
    EdtAcessoCidade: TEdit;
    SBConsCidade: TSpeedButton;
    lblAcessoPais: TLabel;
    EdtAcessoSiglaPais: TEdit;
    EdtAcessoPais: TEdit;
    SBAcessoPais: TSpeedButton;
    AcessoGrid: TDBGrid;
    procedure SBCidadeClick(Sender: TObject);
    procedure SBEstadoClick(Sender: TObject);
    procedure SBPaisClick(Sender: TObject);
    procedure btnConsultarClick(Sender: TObject);
    procedure btnIncluirClick(Sender: TObject);
    procedure btnGravarIncluirClick(Sender: TObject);
    procedure btnDesistirClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure btnGravarAlterarClick(Sender: TObject);
    procedure btnExcluirClick(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);
    procedure EdtCodigoCidadeChange(Sender: TObject);
    procedure EdtSiglaEstadoChange(Sender: TObject);
    procedure EdtSiglaPaisChange(Sender: TObject);
    procedure btnAcessoConsultarClick(Sender: TObject);
    procedure EdtAcessoCodigoChange(Sender: TObject);
    procedure EdtAcessoSiglaPaisChange(Sender: TObject);
    procedure EdtAcessoSiglaEstadoChange(Sender: TObject);
    procedure EdtAcessoCodigoCidadeChange(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  CadCEP: TCadCEP;

implementation

{$R *.dfm}

uses MenuPrincipal;

procedure TCadCEP.btnIncluirClick(Sender: TObject);
begin
  EdtCodigo.Enabled := True;
  EdtCEP.Enabled := True;
  EdtCodigoCidade.Enabled := True;
  EdtSiglaEstado.Enabled := True;
  EdtSiglaPais.Enabled := True;
  SBCidade.Enabled := True;
  SBEstado.Enabled := True;
  SBPais.Enabled := True;
  CBAtivo.Enabled := True;

  EdtCEP.Clear;
  EdtCodigoCidade.Clear;
  EdtSiglaEstado.Clear;
  EdtSiglaPais.Clear;

  btnIncluir.Visible := False;
  btnAlterar.Visible := False;
  btnGravarAlterar.Visible := False;
  btnExcluir.Visible := False;
  btnConsultar.Visible := False;

  btnGravarIncluir.Visible := True;
  btnDesistir.Visible := True;
end;

procedure TCadCEP.btnGravarIncluirClick(Sender: TObject);
var codigo, CEP, Cidade, Estado, Pais, Ativo: string;
begin
 codigo := EdtCodigo.Text;
 CEP := EdtCEP.Text;
 Cidade := EdtCidade.Text;
 Estado := EdtSiglaEstado.Text;
 Pais := EdtSiglaPais.Text;
 if CBAtivo.Checked then Ativo := 'S' else Ativo := 'N';

 if codigo = '' then begin
  ShowMessage('Código não pode ser vazio!');
  Abort;
 End;

 if CEP = '' then begin
  ShowMessage('CEP não pode ser vazio!');
  Abort;
 End;

 if Cidade = '' then begin
  ShowMessage('Cidade não pode ser vazia!');
  Abort;
 End;

 if Estado = '' then begin
  ShowMessage('Estado não pode ser vazio!');
  Abort;
 End;

 if Pais = '' then begin
  ShowMessage('País não pode ser vazio!');
  Abort;
 End;

 CadCEPDM.SelectQuery.SQL.Clear;
 CadCEPDM.SelectQuery.SQL.Text :=
 'select * from cadcep where CEP = :cep';
 CadCEPDM.SelectQuery.ParamByName('CEP').AsString := CEP;
 CadCEPDM.SelectQuery.Open;

 if not CadCEPDM.SelectQuery.IsEmpty then begin
  ShowMessage('CEP já cadastrado!');
  Abort;
 End;

 CadCEPDM.SelectQuery.SQL.Clear;
 CadCEPDM.SelectQuery.SQL.Text :=
 'select * from cadcep where codigo = :codigo';
 CadCEPDM.SelectQuery.ParamByName('codigo').AsString := codigo;
 CadCEPDM.SelectQuery.Open;

 if not CadCEPDM.SelectQuery.IsEmpty then begin
  ShowMessage('Código já cadastrado!');
  Abort;
 End;

 CadCEPDM.InsertQuery.SQL.Clear;
 CadCEPDM.InsertQuery.SQL.Text :=
 'insert into cadCEP (codigo, CEP, cidade, estado, pais, ativo) values (:codigo, :CEP, :Cidade, :Estado, :Pais, :Ativo)';
 CadCEPDM.InsertQuery.ParamByName('CEP').AsString := CEP;
 CadCEPDM.InsertQuery.ParamByName('cidade').AsString := cidade;
 CadCEPDM.InsertQuery.ParamByName('estado').AsString := estado;
 CadCEPDM.InsertQuery.ParamByName('pais').AsString := pais;
 CadCEPDM.InsertQuery.ParamByName('ativo').AsString := ativo;
 CadCEPDM.InsertQuery.ParamByName('codigo').AsString := codigo;

 LogsDM.InserirLog.SQL.Clear;
 LogsDM.InserirLog.SQL.Text :=
 'insert into logs (descricao, tela, data, emp_id, usuario) values (:descricao, :tela, :data, :emp_id, :usuario)';
 LogsDM.InserirLog.ParamByName('descricao').AsString :=
 'Inseriu o CEP ' + CEP + ' na cidade ' + cidade + ' no estado ' + estado + ' no país ' + pais + ' e ativo ' + ativo;
 LogsDM.InserirLog.ParamByName('tela').AsString := 'CadCEP';
 LogsDM.InserirLog.ParamByName('data').AsDatetime := Now;
 LogsDM.InserirLog.ParamByName('usuario').AsString := UsuarioLogado;
 LogsDM.InserirLog.ParamByName('emp_id').AsString := EmpresaLogada;
 try
 CadCEPDM.InsertQuery.ExecSQL;
 LogsDM.InserirLog.ExecSQL;
 ShowMessage('Cadastrado com sucesso!');
 EdtCodigo.Enabled := False;
 EdtCEP.Enabled := False;
 EdtCodigoCidade.Enabled := False;
 EdtSiglaEstado.Enabled := False;
 EdtSiglaPais.Enabled := False;
 SBCidade.Enabled := False;
 SBEstado.Enabled := False;
 SBPais.Enabled := False;

 btnIncluir.Visible := True;
 btnAlterar.Visible := True;
 btnExcluir.Visible := True;
 btnConsultar.Visible := True;

 btnGravarIncluir.Visible := False;
 btnDesistir.Visible := False;
 except
 ShowMessage('Erro na inclusão');
 end;
end;

procedure TCadCEP.btnAlterarClick(Sender: TObject);
begin
  if EdtCodigo.Text = '' then begin
   ShowMessage('CEP não selecionado');
   Abort;
  End;
  EdtCodigoCidade.Enabled := True;
  EdtSiglaEstado.Enabled := True;
  EdtSiglaPais.Enabled := True;
  SBCidade.Enabled := True;
  SBEstado.Enabled := True;
  SBPais.Enabled := True;
  CBAtivo.Enabled := True;

  btnIncluir.Visible := False;
  btnAlterar.Visible := False;
  btnGravarIncluir.Visible := False;
  btnExcluir.Visible := False;
  btnConsultar.Visible := False;

  btnDesistir.Visible := True;
  btnGravarAlterar.Visible := True;
end;

procedure TCadCEP.btnGravarAlterarClick(Sender: TObject);
var Codigo, CEP, Cidade, Estado, Pais, Ativo: string;
begin
 Codigo := EdtCodigo.Text;
 CEP := EdtCEP.Text;
 Cidade := EdtCodigoCidade.Text;
 Estado := EdtSiglaEstado.Text;
 Pais := EdtSiglaPais.Text;
 if CBAtivo.Checked then Ativo := 'S' else Ativo := 'N';

 if EdtCodigo.Text = '' then begin
  ShowMessage('Código não pode ser vazio!');
  Abort;
 End;

 if EdtCEP.Text = '' then begin
  ShowMessage('CEP não pode ser vazio!');
  Abort;
 End;

 if EdtCidade.Text = '' then begin
  ShowMessage('Cidade não pode ser vazia!');
  Abort;
 End;

 if EdtEstado.Text = '' then begin
  ShowMessage('Estado não pode ser vazio!');
  Abort;
 End;

 if EdtPais.Text = '' then begin
  ShowMessage('País não pode ser vazio!');
  Abort;
 End;

 CadCEPDM.UpdateQuery.SQL.Clear;
 CadCEPDM.UpdateQuery.SQL.Text :=
 'update cadCEP set cidade = :cidade, estado = :estado, pais = :pais, ativo = :ativo where CEP = :CEP';
 CadCEPDM.UpdateQuery.ParamByName('CEP').AsString := CEP;
 CadCEPDM.UpdateQuery.ParamByName('cidade').AsString := cidade;
 CadCEPDM.UpdateQuery.ParamByName('estado').AsString := estado;
 CadCEPDM.UpdateQuery.ParamByName('pais').AsString := pais;
 CadCEPDM.UpdateQuery.ParamByName('ativo').AsString := ativo;

 LogsDM.InserirLog.SQL.Clear;
 LogsDM.InserirLog.SQL.Text :=
 'insert into logs (descricao, tela, data, emp_id, usuario) values (:descricao, :tela, :data, :emp_id, :usuario)';
 LogsDM.InserirLog.ParamByName('descricao').AsString :=
 'Alterou o CEP ' + CEP + ' na cidade ' + cidade + ' no estado ' + estado + ' no país ' + pais + ' e ativo ' + ativo;
 LogsDM.InserirLog.ParamByName('tela').AsString := 'CadCEP';
 LogsDM.InserirLog.ParamByName('data').AsDatetime := Now;
 LogsDM.InserirLog.ParamByName('usuario').AsString := UsuarioLogado;
 LogsDM.InserirLog.ParamByName('emp_id').AsString := EmpresaLogada;
 try
 CadCEPDM.UpdateQuery.ExecSQL;
 LogsDM.InserirLog.ExecSQL;
 ShowMessage('Alterado com sucesso!');
 EdtCodigoCidade.Enabled := False;
 EdtSiglaEstado.Enabled := False;
 EdtSiglaPais.Enabled := False;
 SBCidade.Enabled := False;
 SBEstado.Enabled := False;
 SBPais.Enabled := False;
 CBAtivo.Enabled := False;

 btnIncluir.Visible := True;
 btnAlterar.Visible := True;
 btnExcluir.Visible := True;
 btnConsultar.Visible := True;

 btnGravarIncluir.Visible := False;
 btnGravarAlterar.Visible := False;
 btnDesistir.Visible := False;
 except
 ShowMessage('Erro na alteração');
 end;
end;

procedure TCadCEP.btnDesistirClick(Sender: TObject);
begin
  EdtCodigo.Enabled := False;
  EdtCEP.Enabled := False;
  EdtCodigoCidade.Enabled := False;
  EdtSiglaEstado.Enabled := False;
  EdtSiglaPais.Enabled := False;
  SBCidade.Enabled := False;
  SBEstado.Enabled := False;
  SBPais.Enabled := False;
  CBAtivo.Enabled := False;

  EdtCEP.Clear;
  EdtCodigoCidade.Clear;
  EdtSiglaEstado.Clear;
  EdtSiglaPais.Clear;

  btnIncluir.Visible := True;
  btnAlterar.Visible := True;
  btnExcluir.Visible := True;
  btnConsultar.Visible := True;

  btnGravarIncluir.Visible := False;
  btnDesistir.Visible := False;
  btnGravarAlterar.Visible := False;
end;

procedure TCadCEP.btnExcluirClick(Sender: TObject);
var Codigo, CEP, Cidade, Estado, Pais, Ativo: string;
begin
 Codigo := EdtCodigo.Text;
 CEP := EdtCEP.Text;
 Cidade := EdtCidade.Text;
 Estado := EdtEstado.Text;
 Pais := EdtPais.Text;
 if CBAtivo.Checked then Ativo := 'S' else Ativo := 'N';

 CadCEPDM.SelectQuery.SQL.Clear;
 CadCEPDM.SelectQuery.SQL.Text :=
 'select * from cadentidade where CEP = :cep';
 CadCEPDM.SelectQuery.ParamByName('CEP').AsString := CEP;
 CadCEPDM.SelectQuery.Open;

 if not CadCEPDM.SelectQuery.IsEmpty then begin
  ShowMessage('CEP está sendo usado no cadastro de Entidade! Favor verifique!');
  Abort;
 End;

 CadCEPDM.SelectQuery.SQL.Clear;
 CadCEPDM.SelectQuery.SQL.Text :=
 'select * from cadcep where CEP = :cep';
 CadCEPDM.SelectQuery.ParamByName('CEP').AsString := CEP;
 CadCEPDM.SelectQuery.Open;

 if CadCEPDM.SelectQuery.IsEmpty then begin
  ShowMessage('CEP já está cadastrado!');
  Abort;
 End;

 CadCEPDM.DeleteQuery.SQL.Clear;
 CadCEPDM.DeleteQuery.SQL.Text := 'delete from cadcep where codigo = :codigo';
 CadCEPDM.DeleteQuery.ParamByName('codigo').AsString := codigo;

 LogsDM.InserirLog.SQL.Clear;
 LogsDM.InserirLog.SQL.Text :=
 'insert into logs (descricao, tela, data, usuario, emp_id) values (:descricao, :tela, :data, :usuario, :emp_id)';
 LogsDM.InserirLog.ParamByName('descricao').AsString :=
 'Excluiu o CEP ' + CEP + ' na cidade ' + cidade + ' no estado ' + estado + ' no país ' + pais + ' e ativo ' + ativo;
 LogsDM.InserirLog.ParamByName('tela').AsString := 'CadCEP';
 LogsDM.InserirLog.ParamByName('data').AsDatetime := Now;
 LogsDM.InserirLog.ParamByName('usuario').AsString := UsuarioLogado;
 LogsDM.InserirLog.ParamByName('emp_id').AsString := EmpresaLogada;
 try
 CadCEPDM.DeleteQuery.ExecSQL;
 LogsDM.InserirLog.ExecSQL;
 ShowMessage('Excluído com sucesso');
 EdtCodigo.Clear;
 EdtCEP.Clear;
 EdtCodigoCidade.Clear;
 EdtSiglaEstado.Clear;
 EdtSiglaPais.Clear;
 except
 ShowMessage('Erro na exclusão!');
 end;
end;

procedure TCadCEP.btnFecharClick(Sender: TObject);
begin
 if Parent is TTabSheet then
 Parent.Free;
end;

procedure TCadCEP.btnConsultarClick(Sender: TObject);
var Codigo, CEP, Cidade, Estado, Pais, ativo: string;
begin
 CadCEPDM.ConsultarCEP.SQL.Clear;
 CadCEPDM.ConsultarCEP.SQL.Text :=
 'select * from cadcep';
 CadCEPDM.ConsultarCEP.Open;

 Application.CreateForm(TConsultarCEP, ConsultarCEP);
 Codigo := ConsultarCEP.SelecionarCEP;
 if codigo <> '' then begin
  EdtCodigo.Text := Codigo;
  CEP := ConsultarCEP.CEP;
  EdtCEP.Text := CEP;
  Cidade := ConsultarCEP.Cidade;
  EdtCidade.Text := Cidade;
  Estado := ConsultarCEP.Estado;
  EdtSiglaEstado.Text := Estado;
  Pais := ConsultarCEP.Pais;
  EdtSiglaPais.Text := Pais;
  Ativo := ConsultarCEP.Ativo;
  CBAtivo.Checked := Ativo = 'S';
 end;
end;

procedure TCadCEP.EdtAcessoCodigoChange(Sender: TObject);
var Codigo: string;
begin
 Codigo := EdtAcessoCodigo.Text;
 CadCEPDM.ConsultarCEP.SQL.Clear;
 CadCEPDM.ConsultarCEP.SQL.Text :=
 'select * from cadcep where codigo = :codigo';
 CadCEPDM.ConsultarCEP.ParamByName('codigo').AsString := codigo;
 CadCEPDM.ConsultarCEP.Open;

 EdtAcessoCEP.Text := CadCEPDM.ConsultarCEP.FieldByName('CEP').AsString;
end;

procedure TCadCEP.SBCidadeClick(Sender: TObject);
var codigo, cidade: string;
begin
 CadCidadeDM.ConsultarCidade.SQL.Clear;
 CadCidadeDM.ConsultarCidade.SQL.Text :=
 'select * from cadcidade';
 CadCidadeDM.ConsultarCidade.Open;

 Application.CreateForm(TConsultarCidade, ConsultarCidade);
 codigo := ConsultarCidade.ConsultarCidade;
 if codigo <> '' then begin
  EdtCodigoCidade.Text := codigo;
  Cidade := ConsultarCidade.Cidade;
  EdtCidade.Text := cidade;
 end;
end;

procedure TCadCEP.EdtCodigoCidadeChange(Sender: TObject);
var codigo: string;
begin
 codigo := EdtCodigoCidade.Text;
 CadCidadeDM.ConsultarCidade.SQL.Clear;
 CadCidadeDM.ConsultarCidade.SQL.Text :=
 'select * from cadcidade where codigo = :codigo';
 CadCidadeDM.ConsultarCidade.ParamByName('codigo').AsString := codigo;
 CadCidadeDM.ConsultarCidade.Open;

 EdtCidade.Text := CadCidadeDM.ConsultarCidade.FieldByName('cidade').AsString;
end;

procedure TCadCEP.EdtAcessoCodigoCidadeChange(Sender: TObject);
var codigo: string;
begin
 codigo := EdtAcessoCodigoCidade.Text;
 CadCidadeDM.ConsultarCidade.SQL.Clear;
 CadCidadeDM.ConsultarCidade.SQL.Text :=
 'select * from cadcidade where codigo = :codigo';
 CadCidadeDM.ConsultarCidade.ParamByName('codigo').AsString := codigo;
 CadCidadeDM.ConsultarCidade.Open;

 EdtAcessoCidade.Text := CadCidadeDM.ConsultarCidade.FieldByName('cidade').AsString;
end;

procedure TCadCEP.SBEstadoClick(Sender: TObject);
var codigo, sigla, estado: string;
begin
 CadEstadoDM.ConsultarEstado.SQL.Clear;
 CadEstadoDM.ConsultarEstado.SQL.Text :=
 'select * from cadestado where ativo = :ativo';
 CadEstadoDM.ConsultarEstado.ParamByName('ativo').AsString := 'S';
 CadEstadoDM.ConsultarEstado.Open;

 Application.CreateForm(TConsultarEstado, ConsultarEstado);
 codigo := ConsultarEstado.SelecionarEstado;
 if codigo <> '' then begin
  sigla := ConsultarEstado.Sigla;
  EdtSiglaEstado.Text := sigla;
  estado := ConsultarEstado.Estado;
  EdtEstado.Text := Estado;
 end;
end;

procedure TCadCEP.EdtSiglaEstadoChange(Sender: TObject);
var sigla: string;
begin
 sigla := EdtSiglaEstado.Text;
 CadEstadoDM.ConsultarEstado.SQL.Clear;
 CadEstadoDM.ConsultarEstado.SQL.Text :=
 'select * from cadestado where sigla = :sigla';
 CadEstadoDM.ConsultarEstado.ParamByName('sigla').AsString := sigla;
 CadEstadoDM.ConsultarEstado.Open;

 EdtEstado.Text := CadEstadoDM.ConsultarEstado.FieldByName('estado').AsString;
end;

procedure TCadCEP.EdtAcessoSiglaEstadoChange(Sender: TObject);
var sigla: string;
begin
 sigla := EdtAcessoSiglaEstado.Text;
 CadEstadoDM.ConsultarEstado.SQL.Clear;
 CadEstadoDM.ConsultarEstado.SQL.Text :=
 'select * from cadestado where sigla = :sigla';
 CadEstadoDM.ConsultarEstado.ParamByName('sigla').AsString := sigla;
 CadEstadoDM.ConsultarEstado.Open;

 EdtAcessoEstado.Text := CadEstadoDM.ConsultarEstado.FieldByName('estado').AsString;
end;

procedure TCadCEP.SBPaisClick(Sender: TObject);
var sigla, codigo, pais: string;
begin
 CadPaisDM.ConsultarPais.SQL.Clear;
 CadPaisDM.ConsultarPais.SQL.Text :=
 'select * from cadpais where ativo = :ativo';
 CadPaisDM.ConsultarPais.ParamByName('ativo').AsString := 'S';
 CadPaisDM.ConsultarPais.Open;

 Application.CreateForm(TConsultarPais, ConsultarPais);
 codigo := ConsultarPais.SelecionarPais;
 if codigo <> '' then begin
  Sigla := ConsultarPais.Sigla;
  EdtSiglaPais.Text := sigla;
  Pais := ConsultarPais.Pais;
  EdtPais.Text := Pais;
 end;
end;

procedure TCadCEP.EdtSiglaPaisChange(Sender: TObject);
var sigla: string;
begin
 sigla := EdtSiglaPais.Text;
 CadPaisDM.ConsultarPais.SQL.Clear;
 CadPaisDM.ConsultarPais.SQL.Text :=
 'select * from cadpais where sigla = :sigla';
 CadPaisDM.ConsultarPais.ParamByName('sigla').AsString := sigla;
 CadPaisDM.ConsultarPais.Open;

 EdtPais.Text := CadPaisDM.ConsultarPais.FieldByName('pais').AsString;
end;

procedure TCadCEP.EdtAcessoSiglaPaisChange(Sender: TObject);
var sigla: string;
begin
 sigla := EdtAcessoSiglaPais.Text;
 CadPaisDM.ConsultarPais.SQL.Clear;
 CadPaisDM.ConsultarPais.SQL.Text :=
 'select * from cadpais where sigla = :sigla';
 CadPaisDM.ConsultarPais.ParamByName('sigla').AsString := sigla;
 CadPaisDM.ConsultarPais.Open;

 EdtAcessoPais.Text := CadPaisDM.ConsultarPais.FieldByName('pais').AsString;
end;

procedure TCadCEP.btnAcessoConsultarClick(Sender: TObject);
var codigo, Pais, Estado, Cidade: string;
    I: integer;
    temwhere: boolean;
begin
 codigo := EdtAcessoCodigo.Text;
 Pais := EdtAcessoSiglaPais.Text;
 Estado := EdtAcessoSiglaEstado.Text;
 Cidade := EdtAcessoCidade.Text;

 CadCEPDM.qryAcesso.SQL.Clear;
 CadCEPDM.qryAcesso.SQL.Text :=
 'select * from cadcep';
 temwhere := false;

 if codigo <> '' then begin
  if temwhere then begin
   CadCEPDM.qryAcesso.SQL.Add('and codigo = :codigo');
  end
  else begin
   CadCEPDM.qryAcesso.SQL.Add('where codigo = :codigo');
   temwhere := true;
  end;
 CadCEPDM.qryAcesso.ParamByName('codigo').AsString := codigo;
 end;

 if Pais <> '' then begin
  if temwhere then begin
   CadCEPDM.qryAcesso.SQL.Add('and Pais = :Pais');
  end
  else begin
   CadCEPDM.qryAcesso.SQL.Add('where Pais = :Pais');
   temwhere := true;
  end;
 CadCEPDM.qryAcesso.ParamByName('Pais').AsString := Pais;
 end;

 if Estado <> '' then begin
  if temwhere then begin
   CadCEPDM.qryAcesso.SQL.Add('and Estado = :Estado');
  end
  else begin
   CadCEPDM.qryAcesso.SQL.Add('where Estado = :Estado');
   temwhere := true;
  end;
 CadCEPDM.qryAcesso.ParamByName('Estado').AsString := Estado;
 end;

 if EdtAcessoCodigoCidade.Text <> '' then begin
  if temwhere then begin
   CadCEPDM.qryAcesso.SQL.Add('and Cidade = :Cidade');
  end
  else begin
   CadCEPDM.qryAcesso.SQL.Add('where Cidade = :Cidade');
   temwhere := true;
  end;
 CadCEPDM.qryAcesso.ParamByName('Cidade').AsString := Cidade;
 end;

 if RGAcessoAtivo.ItemIndex = 0 then begin
  if temwhere then
   begin
    CadCEPDM.qryAcesso.SQL.Add('and ativo = :ativo');
   end
    else begin
     CadCEPDM.qryAcesso.SQL.Add('where ativo = :ativo');
     temwhere := true;
    end;
 CadCEPDM.qryAcesso.ParamByName('ativo').AsString := 'S';
 end;

 if RGAcessoAtivo.ItemIndex = 1 then begin
  if temwhere then begin
   CadCEPDM.qryAcesso.SQL.Add('and ativo = :ativo');
  end
  else begin
   CadCEPDM.qryAcesso.SQL.Add('where ativo = :ativo');
   temwhere := true;
  end;
 CadCEPDM.qryAcesso.ParamByName('ativo').AsString := 'N';
 end;
 CadCEPDM.qryAcesso.Open;
 for i := 0 to AcessoGrid.Columns.Count - 1 do
 AcessoGrid.Columns[i].Width := AcessoGrid.Canvas.TextWidth(AcessoGrid.Columns[i].Title.Caption + '     ');
end;
end.
