unit FatGeral;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls, Vcl.ComCtrls,
  Vcl.Buttons, Vcl.Grids, Data.DB, Vcl.DBGrids,
  ConsultarNaturezaForm, NaturezaDataModule,
  ConsultarProdutoForm, ProdutoDataModule,
  ConsultarCorForm, CorDataModule,
  ConsultarDepositoForm, DepositoDataModule,
  ConsultarTamanhoForm, TamanhoDataModule,
  ConsultarEntidadeForm, EntidadeDataModule,
  ConsultarCSTICMSForm, CSTICMSDataModule,
  ConsultarCSOSNForm, CSOSNDataModule,
  ConsultarCSTIPIForm, CSTIPIDataModule,
  ConsultarENQIPIForm, ENQIPIDataModule,
  ConsultarCSTPISForm, CSTPISDataModule,
  ConsultarCSTCOFINSForm, CSTCOFINSDataModule,
  GeralDataModule,
  Log, LogDataModule,
  GlobalUnit,
  ReceberDM,
  MoedaDM;

type
  TFatGeralForm = class(TForm)
    Panel1: TPanel;
    lblCliente: TLabel;
    lblSerie: TLabel;
    EdtEntidade: TEdit;
    lblNatureza: TLabel;
    lbldtEmissão: TLabel;
    lbldtSaida: TLabel;
    DTEmissao: TDateTimePicker;
    DTSaida: TDateTimePicker;
    EdtSerie: TEdit;
    EdtNatureza: TEdit;
    SBNatureza: TSpeedButton;
    btnIncluir: TButton;
    btnGravar: TButton;
    btnDesistir: TButton;
    btnFechar: TButton;
    lblValFrete: TLabel;
    EdtValFrete: TEdit;
    lblDesconto: TLabel;
    EdtValDesconto: TEdit;
    NIGrid: TStringGrid;
    SBEntidade: TSpeedButton;
    Totais: TGroupBox;
    lblValor_Total: TLabel;
    edtValor_total: TEdit;
    EdtValor_Base_ICMS: TEdit;
    lblValor_base_icms: TLabel;
    lblValor_ICMS: TLabel;
    edtValor_ICMS: TEdit;
    edtValor_Base_IPI: TEdit;
    lblValor_Base_IPI: TLabel;
    EdtValor_IPI: TEdit;
    lblValor_IPI: TLabel;
    lblValor_Base_PIS: TLabel;
    lblValor_PIS: TLabel;
    lblValor_Base_Cofins: TLabel;
    lblValor_COFINS: TLabel;
    EdtValor_base_PIS: TEdit;
    EdtValor_PIS: TEdit;
    edtvalor_base_cofins: TEdit;
    EdtValor_COFINS: TEdit;
    lblValor_Produtos: TLabel;
    EdtValor_Produtos: TEdit;
    lblQuantidade: TLabel;
    EdtQuantidade: TEdit;
    EdtDadosAdicionais: TEdit;
    RBDadosAdicionais: TRadioGroup;
    lblModFrete: TLabel;
    CBPresenca: TComboBox;
    CBmodFrete: TComboBox;
    lblPresenca: TLabel;
    lblPeso: TLabel;
    lblPesoL: TLabel;
    lblEspecie: TLabel;
    EdtEspecie: TEdit;
    EdtPesoL: TEdit;
    EdtPesoB: TEdit;
    lblVolumes: TLabel;
    EdtVolumes: TEdit;
    Duplicatas: TGroupBox;
    lblMoeda: TLabel;
    EdtMoeda: TEdit;
    lblPrazo: TLabel;
    SBMoeda: TSpeedButton;
    EdtPrazo1: TEdit;
    EdtPrazo2: TEdit;
    EdtPrazo3: TEdit;
    EdtPrazo4: TEdit;
    EdtPrazo5: TEdit;
    EdtPrazo6: TEdit;
    EdtPrazo7: TEdit;
    EdtPrazo8: TEdit;
    procedure FormShow(Sender: TObject);
    procedure EdtValFreteExit(Sender: TObject);
    procedure NIGridKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure EdtValDescontoExit(Sender: TObject);
    procedure SBNaturezaClick(Sender: TObject);
    procedure SBEntidadeClick(Sender: TObject);
    procedure btnIncluirClick(Sender: TObject);
    procedure btnDesistirClick(Sender: TObject);
    procedure btnGravarClick(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);
    procedure SBMoedaClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FatGeralForm: TFatGeralForm;

implementation

{$R *.dfm}

procedure TFatGeralForm.btnIncluirClick(Sender: TObject);
begin
 EdtEntidade.Enabled := True;
 EdtNatureza.Enabled := True;
 EdtSerie.Enabled := True;
 EdtValDesconto.Enabled := True;
 EdtValFrete.Enabled := True;
 NIGrid.Enabled := True;
 DTEmissao.Enabled := True;
 DtSaida.Enabled := True;
 EdtDadosAdicionais.Enabled := True;
 EdtEspecie.Enabled := True;
 EdtVolumes.Enabled := True;
 EdtPesoB.Enabled := True;
 EdtPesoL.Enabled := True;
 EdtPrazo1.Enabled := True;
 EdtPrazo2.Enabled := True;
 EdtPrazo3.Enabled := True;
 EdtPrazo4.Enabled := True;
 EdtPrazo5.Enabled := True;
 EdtPrazo6.Enabled := True;
 EdtPrazo7.Enabled := True;
 EdtPrazo8.Enabled := True;
 CBPresenca.Enabled := True;
 CBmodFrete.Enabled := True;

 NIGrid.RowCount := 2;

 SBEntidade.Enabled := True;
 SBNatureza.Enabled := True;
 SBMoeda.Enabled := True;

 BtnGravar.Visible := True;
 BtnDesistir.Visible := True;
 btnIncluir.Visible := False;
end;

procedure TFatGeralForm.btnDesistirClick(Sender: TObject);
begin
 EdtEntidade.Enabled := False;
 EdtNatureza.Enabled := False;
 EdtSerie.Enabled := False;
 EdtValDesconto.Enabled := False;
 EdtValFrete.Enabled := False;
 NIGrid.Enabled := False;
 DTEmissao.Enabled := False;
 DtSaida.Enabled := False;
 EdtDadosAdicionais.Enabled := False;
 EdtEspecie.Enabled := False;
 EdtVolumes.Enabled := False;
 EdtPesoB.Enabled := False;
 EdtPesoL.Enabled := False;
 EdtPrazo1.Enabled := False;
 EdtPrazo2.Enabled := False;
 EdtPrazo3.Enabled := False;
 EdtPrazo4.Enabled := False;
 EdtPrazo5.Enabled := False;
 EdtPrazo6.Enabled := False;
 EdtPrazo7.Enabled := False;
 EdtPrazo8.Enabled := False;
 CBPresenca.Enabled := False;
 CBmodFrete.Enabled := False;

 EdtEntidade.Clear;
 EdtNatureza.Clear;
 EdtSerie.Clear;
 EdtValDesconto.Clear;
 EdtValFrete.Clear;
 EdtDadosAdicionais.Clear;
 EdtEspecie.Clear;
 EdtVolumes.Clear;
 EdtPesoB.Clear;
 EdtPesoL.Clear;
 EdtPrazo1.Clear;
 EdtPrazo2.Clear;
 EdtPrazo3.Clear;
 EdtPrazo4.Clear;
 EdtPrazo5.Clear;
 EdtPrazo6.Clear;
 EdtPrazo7.Clear;
 EdtPrazo8.Clear;

 NIGrid.Enabled := False;
 NIGrid.RowCount := 1;

 SBEntidade.Enabled := False;
 SBNatureza.Enabled := False;
 SBMoeda.Enabled := False;

 BtnGravar.Visible := False;
 BtnDesistir.Visible := False;
 btnIncluir.Visible := Visible;
end;

procedure TFatGeralForm.btnFecharClick(Sender: TObject);
begin
 FecharTela(Sender);
end;

procedure TFatGeralForm.btnGravarClick(Sender: TObject);
var Produto, Cor, Tamanho, Deposito, Lote, Natureza, CST_ICMS, CSOSN, CST_IPI,
    ENQ_IPI, CST_PIS, CST_COFINS, cBenef, cCredPres, serie, entidade, dados_adicionais,
    especie, volumes, pesob, pesol, presenca, modfrete, fatura, moeda: string;
    Qtde, Preco_Uni, Valor, ALIQ_ICMS, Base_ICMS, Val_ICMS, ALIQ_IPI, Base_IPI, Val_IPI,
    ALIQ_COFINS, Base_COFINS, Val_COFINS, ALIQ_PIS, Base_PIS, Val_PIS, Val_Desconto,
    Val_Frete, valor_produtos, valor_total, valor_icms, valor_base_icms, valor_ipi,
    valor_base_ipi, valor_cofins, valor_base_cofins, valor_pis, valor_base_pis,
    quantidade, aliq_icms_nota, aliq_ipi_nota, aliq_pis_nota, aliq_cofins_nota, valor_parcela: Double;
    i, ID_NOTA, dias, qtde_parcelas: Integer;
begin
  if EdtEntidade.Text = '' then begin
  ShowMessage('Cliente não pode ser vazio!');
  Exit;
  end;

  if EdtNatureza.Text = '' then begin
  ShowMessage('Natureza não pode ser vazia!');
  Exit;
  end;

  if EdtSerie.Text = '' then begin
  ShowMessage('Série não pode ser vazio!');
  Exit;
  end;

  if CBPresenca.Text = '' then begin
  ShowMessage('Presença precisa ser informada!');
  Exit;
  end;

  if CBmodFrete.Text = '' then begin
  ShowMessage('Frete precisa ser informado!');
  Exit;
  end;

  serie := EdtSerie.Text;

  if EdtPesoB.Text = '' then EdtPesoB.Text := '0';
  if EdtPesoL.Text = '' then EdtPesoL.Text := '0';
  if EdtVolumes.Text = '' then EdtVolumes.Text := '0';
  if EdtEspecie.Text = '' then EdtEspecie.Text := '0';

  if CBPresenca.Text = '0 - Não se aplica (por exemplo, emissão de NF-e de ajuste)' then presenca := '0'
  else if CBPresenca.Text = '1 - Operação presencial' then presenca := '1'
  else if CBPresenca.Text = '2 - Operação não presencial, pela internet' then presenca := '2'
  else if CBPresenca.Text = '3 - Operação não presencial, teleatendimento' then presenca := '3'
  else if CBPresenca.Text = '5 - Operação presencial, fora do estabelecimento' then presenca := '5'
  else if CBPresenca.text = '9 - Operação não presencial, outros' then presenca := '9';

  if CBmodFrete.Text = '0 - Contratação do frete por conta do remetente (CIF)' then modfrete := '0'
  else if CBmodFrete.Text = '1 - Contratação do frete por conta do destinatário/remetente (FOB)' then modfrete := '1'
  else if CBmodFrete.Text = '2 - Contratação do frete por conta de terceiros' then modfrete := '2'
  else if CBmodFrete.Text = '3 - Sem frete' then modfrete := '3'
  else if CBmodFrete.Text = '4 - Contratação do transporte por conta do remetente (para venda à ordem/entrega futura)' then modfrete := '4'
  else if CBModFrete.Text = '9 - Sem ocorrência de transporte' then modfrete := '9';

  FatGeralDataModule.SelectFatura.SQL.Clear;
  FatGeralDataModule.SelectFatura.SQL.Text :=
  'select (max(cast(numero as integer)) + 1) as proximo_numero ' +
  'from nota_fatura where emp_id = :emp_id and serie = :serie';
  FatGeralDataModule.SelectFatura.ParamByName('emp_id').AsString := empresalogada;
  FatGeralDataModule.SelectFatura.ParamByName('serie').AsString := serie;
  FatGeralDataModule.SelectFatura.Open;

  if FatGeralDataModule.SelectFatura.FieldByName('proximo_numero').IsNull then fatura := '000001'
  else begin
  fatura := Format('%.6d', [FatGeralDataModule.SelectFatura.FieldByName('proximo_numero').AsInteger]);
  end;

  FatGeralDataModule.SelectID_NOTA.SQL.Clear;
  FatGeralDataModule.SelectID_NOTA.SQL.Text :=
  'SELECT nextval(''seq_nota_id'') + 1 AS proximo_id';
  FatGeralDataModule.SelectID_NOTA.Open;

  ID_NOTA := FatGeralDataModule.SelectID_NOTA.FieldByName('proximo_id').AsInteger;

  entidade := EdtEntidade.Text;
  dados_adicionais := EdtDadosAdicionais.Text;
  especie := EdtEspecie.Text;
  volumes := EdtVolumes.Text;
  pesob := EdtPesoB.Text;
  pesol := EdtPesoL.Text;

  valor_produtos := 0;
  valor_icms := 0;
  valor_base_icms := 0;
  valor_ipi := 0;
  valor_base_ipi := 0;
  valor_cofins := 0;
  valor_base_cofins := 0;
  valor_pis := 0;
  valor_base_pis := 0;
  valor_total := 0;
  quantidade := 0;
  qtde_parcelas := 1;
  if EdtPrazo2.Text <> '' then Inc(qtde_parcelas);
  if EdtPrazo3.Text <> '' then Inc(qtde_parcelas);
  if EdtPrazo4.Text <> '' then Inc(qtde_parcelas);
  if EdtPrazo5.Text <> '' then Inc(qtde_parcelas);
  if EdtPrazo6.Text <> '' then Inc(qtde_parcelas);
  if EdtPrazo7.Text <> '' then Inc(qtde_parcelas);
  if EdtPrazo8.Text <> '' then Inc(qtde_parcelas);

  FatGeralDataModule.Conexão.StartTransaction;
  try
    for i := 1 to NIGrid.RowCount - 1 do
     begin
      Produto := NIGrid.Cells[0, i];
      Cor := NIGrid.Cells[1, i];
      Tamanho := NIGrid.Cells[2, i];
      Deposito := NIGrid.Cells[3, i];
      Lote := NIGrid.Cells[4, i];
      Qtde := StrToFloatDef(NIGrid.Cells[5, i], 0);
      Preco_Uni := StrToFloatDef(NIGrid.Cells[6, i], 0);
      Natureza := NIGrid.Cells[8, i];
      CST_ICMS := NIGrid.Cells[9, i];
      CSOSN := NIGrid.Cells[10, i];
      CST_IPI := NIGrid.Cells[14, i];
      ENQ_IPI := NIGrid.Cells[15, i];
      CST_PIS := NIGrid.Cells[19, i];
      CST_COFINS := NIGrid.Cells[23, i];
      cBenef := NIGrid.Cells[29, i];
      cCredPres := NIGrid.Cells[30, i];
      ALIQ_ICMS := StrToFloatDef(NIGrid.Cells[11, i], 0);
      ALIQ_PIS := StrToFloatDef(NIGrid.Cells[20, i], 0);
      ALIQ_IPI := StrToFloatDef(NIGrid.Cells[16, i], 0);
      ALIQ_COFINS := StrToFloatDef(NIGrid.Cells[24, i], 0);
      aliq_icms_nota := ALIQ_ICMS;
      aliq_ipi_nota := ALIQ_IPI;
      aliq_pis_nota := ALIQ_PIS;
      aliq_cofins_nota := ALIQ_COFINS;
      Val_Desconto := StrToFloatDef(NIGrid.Cells[27, i], 0);
      Val_Frete := StrToFloatDef(NIGrid.Cells[28, i], 0);

      Base_ICMS := ((Qtde * Preco_Uni) - Val_Desconto + Val_Frete);
      Val_ICMS := Base_ICMS * (ALIQ_ICMS / 100);
      Base_IPI := ((Qtde * Preco_Uni) - Val_Desconto + Val_Frete + Val_ICMS);
      Val_IPI := Base_IPI * (ALIQ_IPI / 100);
      Base_PIS := ((Qtde * Preco_Uni) - Val_Desconto + Val_Frete);
      Val_PIS := Base_PIS * (ALIQ_PIS / 100);
      Base_COFINS := ((Qtde * Preco_Uni) - Val_Desconto + Val_Frete);
      Val_COFINS := Base_COFINS * (ALIQ_COFINS / 100);
      Valor := ((Qtde * Preco_Uni) - Val_Desconto);

      valor_produtos := valor_produtos + Valor;
      valor_icms := valor_icms + Val_ICMS;
      valor_base_icms := valor_base_icms + Base_ICMS;
      valor_ipi := valor_ipi + Val_IPI;
      valor_base_ipi := valor_base_ipi + Base_IPI;
      valor_cofins := valor_cofins + Val_COFINS;
      valor_base_cofins := valor_base_cofins + Base_COFINS;
      valor_pis := valor_pis + Val_PIS;
      valor_base_pis := valor_base_pis + Base_PIS;
      quantidade := quantidade + Qtde;

      FatGeralDataModule.SelectQuery.SQL.Clear;
      FatGeralDataModule.SelectQuery.SQL.Text :=
      'SELECT qtde FROM estoque WHERE codigo = :codigo AND cor = :cor ' +
      'AND tamanho = :tamanho AND deposito = :deposito AND lote = :lote ' +
      'AND qtde >= :qtde';
      FatGeralDataModule.SelectQuery.ParamByName('codigo').AsString := Produto;
      FatGeralDataModule.SelectQuery.ParamByName('cor').AsString := Cor;
      FatGeralDataModule.SelectQuery.ParamByName('tamanho').AsString := Tamanho;
      FatGeralDataModule.SelectQuery.ParamByName('deposito').AsString := Deposito;
      FatGeralDataModule.SelectQuery.ParamByName('lote').AsString := Lote;
      FatGeralDataModule.SelectQuery.ParamByName('qtde').AsFloat := Qtde;
      FatGeralDataModule.SelectQuery.Open;

      if FatGeralDataModule.SelectQuery.IsEmpty then begin
      ShowMessage('Sem quantidades disponíveis no estoque para o produto: ' + Produto + ' na cor: ' + Cor + ' no tamanho: ' + Tamanho +
      ' no lote: ' + Lote + ' no depósito: ' + Deposito);
      end
      else begin

      FatGeralDataModule.InsertNOTAITEN.SQL.Text :=
      'insert into notaiten ' +
      '(ID_NOTA, fatura, EMP_ID, Serie, Codigo, Cor, Tam, Deposito, Lote, Natureza, CST_ICMS, CSOSN, CST_IPI, ENQ_IPI, CST_PIS, CST_COFINS, cBenef, cCredPres, ' +
      'Qtde, Preco_Uni, Valor, ALIQ_ICMS, Val_Base_ICMS, Val_ICMS, ALIQ_IPI, Val_Base_IPI, Val_IPI, ALIQ_COFINS, Val_Base_COFINS, Val_COFINS, ALIQ_PIS, Val_Base_PIS, ' +
      'Val_PIS, Val_Desconto, Val_Frete) VALUES ' +
      '(:ID_NOTA, :fatura, :EMP_ID, :Serie, :Codigo, :Cor, :Tam, :Deposito, :Lote, :Natureza, :CST_ICMS, :CSOSN, :CST_IPI, :ENQ_IPI, :CST_PIS, :CST_COFINS, :cBenef, :cCredPres, ' +
      ':Qtde, :Preco_Uni, :Valor, :ALIQ_ICMS, :Val_Base_ICMS, :Val_ICMS, :ALIQ_IPI, :Val_Base_IPI, :Val_IPI, :ALIQ_COFINS, :Val_Base_COFINS, :Val_COFINS, :ALIQ_PIS, :Val_Base_PIS, ' +
      ':Val_PIS, :Val_Desconto, :Val_Frete)';

      FatGeralDataModule.InsertNOTAITEN.ParamByName('ID_NOTA').AsInteger := ID_NOTA;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Fatura').AsString := Fatura;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('EMP_ID').AsString := EmpresaLogada;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Serie').AsString := serie;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Codigo').AsString := Produto;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Cor').AsString := Cor;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Tam').AsString := Tamanho;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Deposito').AsString := Deposito;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Lote').AsString := Lote;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('natureza').AsString := Natureza;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('CST_ICMS').AsString := CST_ICMS;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('CSOSN').AsString := CSOSN;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('CST_IPI').AsString := CST_IPI;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('ENQ_IPI').AsString := ENQ_IPI;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('CST_PIS').AsString := CST_PIS;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('CST_COFINS').AsString := CST_COFINS;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('cBenef').AsString := cBenef;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('cCredPres').AsString := cCredPres;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Qtde').AsFloat := Qtde;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Preco_Uni').AsFloat := Preco_Uni;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Valor').AsFloat := Valor;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('ALIQ_ICMS').AsFloat := ALIQ_ICMS;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Val_Base_ICMS').AsFloat := Base_ICMS;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Val_ICMS').AsFloat := Val_ICMS;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('ALIQ_IPI').AsFloat := ALIQ_IPI;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Val_Base_IPI').AsFloat := Base_IPI;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Val_IPI').AsFloat := Val_IPI;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('ALIQ_COFINS').AsFloat := ALIQ_COFINS;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Val_Base_COFINS').AsFloat := Base_COFINS;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Val_COFINS').AsFloat := Val_COFINS;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('ALIQ_PIS').AsFloat := ALIQ_PIS;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Val_Base_PIS').AsFloat := Base_PIS;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Val_PIS').AsFloat := Val_PIS;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Val_Desconto').AsFloat := Val_Desconto;
      FatGeralDataModule.InsertNOTAITEN.ParamByName('Val_Frete').AsFloat := Val_Frete;
      FatGeralDataModule.InsertNOTAITEN.ExecSQL;

      FatGeralDataModule.UpdateEstoque.SQL.Text :=
      'UPDATE estoque SET qtde = (qtde - :qtde) WHERE codigo = :codigo AND cor = :cor AND deposito = :deposito AND lote = :lote AND tamanho = :tamanho';
      FatGeralDataModule.UpdateEstoque.ParamByName('Codigo').AsString := Produto;
      FatGeralDataModule.UpdateEstoque.ParamByName('Cor').AsString := Cor;
      FatGeralDataModule.UpdateEstoque.ParamByName('tamanho').AsString := Tamanho;
      FatGeralDataModule.UpdateEstoque.ParamByName('Deposito').AsString := Deposito;
      FatGeralDataModule.UpdateEstoque.ParamByName('Lote').AsString := Lote;
      FatGeralDataModule.UpdateEstoque.ParamByName('qtde').AsFloat := Qtde;
      FatGeralDataModule.UpdateEstoque.ExecSQL;

      FatGeralDataModule.InsertProdMov.SQL.Text :=
      'INSERT INTO prodmov (codigo, cor, tamanho, deposito, lote, qtde, data, tipo, Usuario, OBS) VALUES ' +
      '(:codigo, :cor, :tamanho, :deposito, :lote, :qtde, :data, :tipo, :Usuario, :OBS)';
      FatGeralDataModule.InsertProdMov.ParamByName('codigo').AsString := Produto;
      FatGeralDataModule.InsertProdMov.ParamByName('cor').AsString := Cor;
      FatGeralDataModule.InsertProdMov.ParamByName('tamanho').AsString := Tamanho;
      FatGeralDataModule.InsertProdMov.ParamByName('deposito').AsString := Deposito;
      FatGeralDataModule.InsertProdMov.ParamByName('lote').AsString := Lote;
      FatGeralDataModule.InsertProdMov.ParamByName('qtde').AsFloat := Qtde;
      FatGeralDataModule.InsertProdMov.ParamByName('data').AsDateTime := Now;
      FatGeralDataModule.InsertProdMov.ParamByName('tipo').AsString := 'S';
      FatGeralDataModule.InsertProdMov.ParamByName('Usuario').AsString := UsuarioLogado;
      FatGeralDataModule.InsertProdMov.ParamByName('OBS').AsString := 'Movimentação realizada a partir da gravação da nota ' + serie;
      FatGeralDataModule.InsertProdMov.ExecSQL;
     end;
    end;

    valor_total := valor_produtos + valor_icms + valor_ipi + valor_cofins + valor_pis;

    FatGeralDataModule.InsertNOTA.SQL.Text :=
    'INSERT INTO nota (fatura, EMP_ID, Serie, Codcli, dtemissao, dtsaida, Natureza, ' +
    'valor_produtos, valor_total, valor_icms, valor_base_icms, valor_frete, ' +
    'valor_ipi, valor_base_ipi, valor_cofins, valor_base_cofins, valor_pis, ' +
    'valor_base_pis, valor_desconto, quantidade, aliq_icms, aliq_ipi, aliq_pis, ' +
    'aliq_cofins, impresso, dados_adicionais, especie, volumes, pesob, pesol, ' +
    'presenca, modfrete) VALUES (:fatura, :EMP_ID, :Serie, :Codcli, :dtemissao, ' +
    ':dtsaida, :Natureza, :valor_produtos, :valor_total, :valor_icms, ' +
    ':valor_base_icms, :valor_frete, :valor_ipi, :valor_base_ipi, ' +
    ':valor_cofins, :valor_base_cofins, :valor_pis, :valor_base_pis, ' +
    ':valor_desconto, :quantidade, :aliq_icms, :aliq_ipi, :aliq_pis, ' +
    ':aliq_cofins, :impresso, :dados_adicionais, :especie, :volumes, ' +
    ':pesob, :pesol, :presenca, :modfrete)';

    FatGeralDataModule.InsertNOTA.ParamByName('Fatura').AsString := Fatura;
    FatGeralDataModule.InsertNOTA.ParamByName('EMP_ID').AsString := EmpresaLogada;
    FatGeralDataModule.InsertNOTA.ParamByName('Serie').AsString := serie;
    FatGeralDataModule.InsertNOTA.ParamByName('Codcli').AsString := entidade;
    FatGeralDataModule.InsertNOTA.ParamByName('dtemissao').AsDateTime := DtEmissao.DateTime;
    FatGeralDataModule.InsertNOTA.ParamByName('dtsaida').AsDateTime := DtSaida.DateTime;
    FatGeralDataModule.InsertNOTA.ParamByName('natureza').AsString := EdtNatureza.Text;
    FatGeralDataModule.InsertNOTA.ParamByName('valor_produtos').AsFloat := valor_produtos;
    FatGeralDataModule.InsertNOTA.ParamByName('valor_total').AsFloat := valor_total;
    FatGeralDataModule.InsertNOTA.ParamByName('valor_icms').AsFloat := valor_icms;
    FatGeralDataModule.InsertNOTA.ParamByName('valor_base_icms').AsFloat := valor_base_icms;
    FatGeralDataModule.InsertNOTA.ParamByName('valor_frete').AsString := EdtValFrete.Text;
    FatGeralDataModule.InsertNOTA.ParamByName('valor_ipi').AsFloat := valor_ipi;
    FatGeralDataModule.InsertNOTA.ParamByName('valor_base_ipi').AsFloat := valor_base_ipi;
    FatGeralDataModule.InsertNOTA.ParamByName('valor_cofins').AsFloat := valor_cofins;
    FatGeralDataModule.InsertNOTA.ParamByName('valor_base_cofins').AsFloat := valor_base_cofins;
    FatGeralDataModule.InsertNOTA.ParamByName('valor_pis').AsFloat := valor_pis;
    FatGeralDataModule.InsertNOTA.ParamByName('valor_base_pis').AsFloat := valor_base_pis;
    FatGeralDataModule.InsertNOTA.ParamByName('valor_desconto').AsString := EdtValDesconto.Text;
    FatGeralDataModule.InsertNOTA.ParamByName('quantidade').AsFloat := quantidade;
    FatGeralDataModule.InsertNOTA.ParamByName('aliq_icms').AsFloat := aliq_icms_nota;
    FatGeralDataModule.InsertNOTA.ParamByName('aliq_ipi').AsFloat := aliq_ipi_nota;
    FatGeralDataModule.InsertNOTA.ParamByName('aliq_pis').AsFloat := aliq_pis_nota;
    FatGeralDataModule.InsertNOTA.ParamByName('aliq_cofins').AsFloat := aliq_cofins_nota;
    FatGeralDataModule.InsertNOTA.ParamByName('dados_adicionais').AsString := dados_adicionais;
    FatGeralDataModule.InsertNOTA.ParamByName('especie').AsString := especie;
    FatGeralDataModule.InsertNOTA.ParamByName('pesob').AsString := pesob;
    FatGeralDataModule.InsertNOTA.ParamByName('pesol').AsString := pesol;
    FatGeralDataModule.InsertNOTA.ParamByName('presenca').AsString := presenca;
    FatGeralDataModule.InsertNOTA.ParamByName('modfrete').AsString := modfrete;
    FatGeralDataModule.InsertNOTA.ParamByName('volumes').AsString := volumes;
    FatGeralDataModule.InsertNOTA.ParamByName('Impresso').AsString := 'N';
    FatGeralDataModule.InsertNOTA.ExecSQL;

    FatGeralDataModule.InsertNOTA_FATURA.SQL.CLear;
    FatGeralDataModule.InsertNOTA_FATURA.SQL.Text :=
    'insert into nota_fatura (numero, serie, emp_id) values (:numero, :serie, :emp_id)';
    FatGeralDataModule.InsertNOTA_FATURA.ParamByName('numero').AsString := fatura;
    FatGeralDataModule.InsertNOTA_FATURA.ParamByName('serie').AsString := serie;
    FatGeralDataModule.InsertNOTA_FATURA.ParamByName('emp_id').AsString := empresalogada;
    FatGeralDataModule.InsertNOTA_FATURA.ExecSQL;

    valor_parcela := (valor_total / qtde_parcelas);

    if EdtPrazo1.Text = '' then Dias:= 0 else Dias := StrToInt(EdtPrazo1.Text);
    FatGeralDataModule.InsertRECEBER.SQL.Clear;
    FatGeralDataModule.InsertRECEBER.SQL.Text :=
    'insert into receber (dtemissao, dtvencto, numero, entidade, fatura, valor, valor_pago, status, moeda, parcela, valor_parcela) ' +
    'values (:dtemissao, :dtvencto, :numero, :entidade, :fatura, :valor, :valor_pago, :status, :moeda, :parcela, :valor_parcela)';
    FatGeralDataModule.InsertRECEBER.ParamByName('dtemissao').AsDate := Now;
    FatGeralDataModule.InsertRECEBER.ParamByName('dtvencto').AsDate := Now + Dias;
    FatGeralDataModule.InsertRECEBER.ParamByName('numero').AsString := fatura + '-' + Empresalogada + '-' + serie + '/' + '1';
    FatGeralDataModule.InsertRECEBER.ParamByName('entidade').AsString := entidade;
    FatGeralDataModule.InsertRECEBER.ParamByName('fatura').AsString := Fatura;
    FatGeralDataModule.InsertRECEBER.ParamByName('valor').AsFloat := valor_total;
    FatGeralDataModule.InsertRECEBER.ParamByName('valor_pago').AsFloat := 0;
    FatGeralDataModule.InsertRECEBER.ParamByName('status').AsString := 'DUPL';
    FatGeralDataModule.InsertRECEBER.ParamByName('moeda').AsString := moeda;
    FatGeralDataModule.InsertRECEBER.ParamByName('parcela').AsString := '1';
    FatGeralDataModule.InsertRECEBER.ParamByName('valor_parcela').AsFloat := valor_parcela;
    FatGeralDataModule.InsertRECEBER.ExecSQL;

    if EdtPrazo2.Text <> '' then begin
    Dias := StrToInt(EdtPrazo2.Text);
    FatGeralDataModule.InsertRECEBER.SQL.Clear;
    FatGeralDataModule.InsertRECEBER.SQL.Text :=
    'insert into receber (dtemissao, dtvencto, numero, entidade, fatura, valor, valor_pago, status, moeda, parcela, valor_parcela) ' +
    'values (:dtemissao, :dtvencto, :numero, :entidade, :fatura, :valor, :valor_pago, :status, :moeda, :parcela, :valor_parcela)';
    FatGeralDataModule.InsertRECEBER.ParamByName('dtemissao').AsDate := Now;
    FatGeralDataModule.InsertRECEBER.ParamByName('dtvencto').AsDate := Now + dias;
    FatGeralDataModule.InsertRECEBER.ParamByName('numero').AsString := fatura + '-' + Empresalogada + '-' + serie + '/' + '2';
    FatGeralDataModule.InsertRECEBER.ParamByName('entidade').AsString := entidade;
    FatGeralDataModule.InsertRECEBER.ParamByName('fatura').AsString := Fatura;
    FatGeralDataModule.InsertRECEBER.ParamByName('valor').AsFloat := valor_total;
    FatGeralDataModule.InsertRECEBER.ParamByName('valor_pago').AsFloat := 0;
    FatGeralDataModule.InsertRECEBER.ParamByName('status').AsString := 'DUPL';
    FatGeralDataModule.InsertRECEBER.ParamByName('moeda').AsString := moeda;
    FatGeralDataModule.InsertRECEBER.ParamByName('parcela').AsString := '2';
    FatGeralDataModule.InsertRECEBER.ParamByName('valor_parcela').AsFloat := valor_parcela;
    FatGeralDataModule.InsertRECEBER.ExecSQL;
    end;

    if EdtPrazo3.Text <> '' then begin
    Dias := StrToInt(EdtPrazo3.Text);
    FatGeralDataModule.InsertRECEBER.SQL.Clear;
    FatGeralDataModule.InsertRECEBER.SQL.Text :=
    'insert into receber (dtemissao, dtvencto, numero, entidade, fatura, valor, valor_pago, status, moeda, parcela, valor_parcela) ' +
    'values (:dtemissao, :dtvencto, :numero, :entidade, :fatura, :valor, :valor_pago, :status, :moeda, :parcela, :valor_parcela)';
    FatGeralDataModule.InsertRECEBER.ParamByName('dtemissao').AsDate := Now;
    FatGeralDataModule.InsertRECEBER.ParamByName('dtvencto').AsDate := Now + Dias;
    FatGeralDataModule.InsertRECEBER.ParamByName('numero').AsString := fatura + '-' + Empresalogada + '-' + serie + '/' + '3';
    FatGeralDataModule.InsertRECEBER.ParamByName('entidade').AsString := entidade;
    FatGeralDataModule.InsertRECEBER.ParamByName('fatura').AsString := Fatura;
    FatGeralDataModule.InsertRECEBER.ParamByName('valor').AsFloat := valor_total;
    FatGeralDataModule.InsertRECEBER.ParamByName('valor_pago').AsFloat := 0;
    FatGeralDataModule.InsertRECEBER.ParamByName('status').AsString := 'DUPL';
    FatGeralDataModule.InsertRECEBER.ParamByName('moeda').AsString := moeda;
    FatGeralDataModule.InsertRECEBER.ParamByName('parcela').AsString := '3';
    FatGeralDataModule.InsertRECEBER.ParamByName('valor_parcela').AsFloat := valor_parcela;
    FatGeralDataModule.InsertRECEBER.ExecSQL;
    end;

    if EdtPrazo4.Text <> '' then begin
    Dias := StrToInt(EdtPrazo4.Text);
    FatGeralDataModule.InsertRECEBER.SQL.Clear;
    FatGeralDataModule.InsertRECEBER.SQL.Text :=
    'insert into receber (dtemissao, dtvencto, numero, entidade, fatura, valor, valor_pago, status, moeda, parcela, valor_parcela) ' +
    'values (:dtemissao, :dtvencto, :numero, :entidade, :fatura, :valor, :valor_pago, :status, :moeda, :parcela, :valor_parcela)';
    FatGeralDataModule.InsertRECEBER.ParamByName('dtemissao').AsDate := Now;
    FatGeralDataModule.InsertRECEBER.ParamByName('dtvencto').AsDate := Now + Dias;
    FatGeralDataModule.InsertRECEBER.ParamByName('numero').AsString := fatura + '-' + Empresalogada + '-' + serie + '/' + '4';
    FatGeralDataModule.InsertRECEBER.ParamByName('entidade').AsString := entidade;
    FatGeralDataModule.InsertRECEBER.ParamByName('fatura').AsString := Fatura;
    FatGeralDataModule.InsertRECEBER.ParamByName('valor').AsFloat := valor_total;
    FatGeralDataModule.InsertRECEBER.ParamByName('valor_pago').AsFloat := 0;
    FatGeralDataModule.InsertRECEBER.ParamByName('status').AsString := 'DUPL';
    FatGeralDataModule.InsertRECEBER.ParamByName('moeda').AsString := moeda;
    FatGeralDataModule.InsertRECEBER.ParamByName('parcela').AsString := '4';
    FatGeralDataModule.InsertRECEBER.ParamByName('valor_parcela').AsFloat := valor_parcela;
    FatGeralDataModule.InsertRECEBER.ExecSQL;
    end;

    if EdtPrazo5.Text <> '' then begin
    Dias := StrToInt(EdtPrazo5.Text);
    FatGeralDataModule.InsertRECEBER.SQL.Clear;
    FatGeralDataModule.InsertRECEBER.SQL.Text :=
    'insert into receber (dtemissao, dtvencto, numero, entidade, fatura, valor, valor_pago, status, moeda, parcela, valor_parcela) ' +
    'values (:dtemissao, :dtvencto, :numero, :entidade, :fatura, :valor, :valor_pago, :status, :moeda, :parcela, :valor_parcela)';
    FatGeralDataModule.InsertRECEBER.ParamByName('dtemissao').AsDate := Now;
    FatGeralDataModule.InsertRECEBER.ParamByName('dtvencto').AsDate := Now + Dias;
    FatGeralDataModule.InsertRECEBER.ParamByName('numero').AsString := fatura + '-' + Empresalogada + '-' + serie + '/' + '5';
    FatGeralDataModule.InsertRECEBER.ParamByName('entidade').AsString := entidade;
    FatGeralDataModule.InsertRECEBER.ParamByName('fatura').AsString := Fatura;
    FatGeralDataModule.InsertRECEBER.ParamByName('valor').AsFloat := valor_total;
    FatGeralDataModule.InsertRECEBER.ParamByName('valor_pago').AsFloat := 0;
    FatGeralDataModule.InsertRECEBER.ParamByName('status').AsString := 'DUPL';
    FatGeralDataModule.InsertRECEBER.ParamByName('moeda').AsString := moeda;
    FatGeralDataModule.InsertRECEBER.ParamByName('parcela').AsString := '5';
    FatGeralDataModule.InsertRECEBER.ParamByName('valor_parcela').AsFloat := valor_parcela;
    FatGeralDataModule.InsertRECEBER.ExecSQL;
    end;

    if EdtPrazo6.Text <> '' then begin
    Dias := StrToInt(EdtPrazo6.Text);
    FatGeralDataModule.InsertRECEBER.SQL.Clear;
    FatGeralDataModule.InsertRECEBER.SQL.Text :=
    'insert into receber (dtemissao, dtvencto, numero, entidade, fatura, valor, valor_pago, status, moeda, parcela, valor_parcela) ' +
    'values (:dtemissao, :dtvencto, :numero, :entidade, :fatura, :valor, :valor_pago, :status, :moeda, :parcela, :valor_parcela)';
    FatGeralDataModule.InsertRECEBER.ParamByName('dtemissao').AsDate := Now;
    FatGeralDataModule.InsertRECEBER.ParamByName('dtvencto').AsDate := Now + Dias;
    FatGeralDataModule.InsertRECEBER.ParamByName('numero').AsString := fatura + '-' + Empresalogada + '-' + serie + '/' + '6';
    FatGeralDataModule.InsertRECEBER.ParamByName('entidade').AsString := entidade;
    FatGeralDataModule.InsertRECEBER.ParamByName('fatura').AsString := Fatura;
    FatGeralDataModule.InsertRECEBER.ParamByName('valor').AsFloat := valor_total;
    FatGeralDataModule.InsertRECEBER.ParamByName('valor_pago').AsFloat := 0;
    FatGeralDataModule.InsertRECEBER.ParamByName('status').AsString := 'DUPL';
    FatGeralDataModule.InsertRECEBER.ParamByName('moeda').AsString := moeda;
    FatGeralDataModule.InsertRECEBER.ParamByName('parcela').AsString := '6';
    FatGeralDataModule.InsertRECEBER.ParamByName('valor_parcela').AsFloat := valor_parcela;
    FatGeralDataModule.InsertRECEBER.ExecSQL;
    end;

    if EdtPrazo7.Text <> '' then begin
    Dias := StrToInt(EdtPrazo7.Text);
    FatGeralDataModule.InsertRECEBER.SQL.Clear;
    FatGeralDataModule.InsertRECEBER.SQL.Text :=
    'insert into receber (dtemissao, dtvencto, numero, entidade, fatura, valor, valor_pago, status, moeda, parcela, valor_parcela) ' +
    'values (:dtemissao, :dtvencto, :numero, :entidade, :fatura, :valor, :valor_pago, :status, :moeda, :parcela, :valor_parcela)';
    FatGeralDataModule.InsertRECEBER.ParamByName('dtemissao').AsDate := Now;
    FatGeralDataModule.InsertRECEBER.ParamByName('dtvencto').AsDate := Now + Dias;
    FatGeralDataModule.InsertRECEBER.ParamByName('numero').AsString := fatura + '-' + Empresalogada + '-' + serie + '/' + '7';
    FatGeralDataModule.InsertRECEBER.ParamByName('entidade').AsString := entidade;
    FatGeralDataModule.InsertRECEBER.ParamByName('fatura').AsString := Fatura;
    FatGeralDataModule.InsertRECEBER.ParamByName('valor').AsFloat := valor_total;
    FatGeralDataModule.InsertRECEBER.ParamByName('valor_pago').AsFloat := 0;
    FatGeralDataModule.InsertRECEBER.ParamByName('status').AsString := 'DUPL';
    FatGeralDataModule.InsertRECEBER.ParamByName('moeda').AsString := moeda;
    FatGeralDataModule.InsertRECEBER.ParamByName('parcela').AsString := '7';
    FatGeralDataModule.InsertRECEBER.ParamByName('valor_parcela').AsFloat := valor_parcela;
    FatGeralDataModule.InsertRECEBER.ExecSQL;
    end;

    if EdtPrazo8.Text <> '' then begin
    Dias := StrToInt(EdtPrazo8.Text);
    FatGeralDataModule.InsertRECEBER.SQL.Clear;
    FatGeralDataModule.InsertRECEBER.SQL.Text :=
    'insert into receber (dtemissao, dtvencto, numero, entidade, fatura, valor, valor_pago, status, moeda, parcela, valor_parcela) ' +
    'values (:dtemissao, :dtvencto, :numero, :entidade, :fatura, :valor, :valor_pago, :status, :moeda, :parcela, :valor_parcela)';
    FatGeralDataModule.InsertRECEBER.ParamByName('dtemissao').AsDate := Now;
    FatGeralDataModule.InsertRECEBER.ParamByName('dtvencto').AsDate := Now + Dias;
    FatGeralDataModule.InsertRECEBER.ParamByName('numero').AsString := fatura + '-' + Empresalogada + '-' + serie + '/' + '8';
    FatGeralDataModule.InsertRECEBER.ParamByName('entidade').AsString := entidade;
    FatGeralDataModule.InsertRECEBER.ParamByName('fatura').AsString := Fatura;
    FatGeralDataModule.InsertRECEBER.ParamByName('valor').AsFloat := valor_total;
    FatGeralDataModule.InsertRECEBER.ParamByName('valor_pago').AsFloat := 0;
    FatGeralDataModule.InsertRECEBER.ParamByName('status').AsString := 'DUPL';
    FatGeralDataModule.InsertRECEBER.ParamByName('moeda').AsString := moeda;
    FatGeralDataModule.InsertRECEBER.ParamByName('parcela').AsString := '8';
    FatGeralDataModule.InsertRECEBER.ParamByName('valor_parcela').AsFloat := valor_parcela;
    FatGeralDataModule.InsertRECEBER.ExecSQL;
    end;

    LogModule.InserirLog.SQL.Text :=
    'INSERT INTO logs (descricao, tela, data, emp_id, usuario) VALUES (:descricao, :tela, :data, :emp_id, :usuario)';
    LogModule.InserirLog. ParamByName('descricao').AsString :=
    'O usuário ' + UsuarioLogado + ' gravou a nota ' + fatura + ' na serie ' + serie + ' na empresa ' + EmpresaLogada + ' para o cliente ' + entidade;
    LogModule.InserirLog.ParamByName('tela').AsString := 'FatGeral';
    LogModule.InserirLog.ParamByName('emp_id').AsString := EmpresaLogada;
    LogModule.InserirLog.ParamByName('usuario').AsString := UsuarioLogado;
    LogModule.InserirLog.ParamByName('data').AsDateTime := Now;
    LogModule.InserirLog.ExecSQL;

    LogModule.InserirLog.SQL.Text :=
    'INSERT INTO logs (descricao, tela, data, emp_id, usuario) VALUES (:descricao, :tela, :data, :emp_id, :usuario)';
    LogModule.InserirLog. ParamByName('descricao').AsString :=
    'Gravado a duplicata ' + fatura + '-' + Empresalogada + '-' + serie + ' pelo faturamento da nota ' + fatura;
    LogModule.InserirLog.ParamByName('tela').AsString := 'FatGeral';
    LogModule.InserirLog.ParamByName('emp_id').AsString := EmpresaLogada;
    LogModule.InserirLog.ParamByName('usuario').AsString := UsuarioLogado;
    LogModule.InserirLog.ParamByName('data').AsDateTime := Now;
    LogModule.InserirLog.ExecSQL;

    FatGeralDataModule.Conexão.Commit;

    EdtEntidade.Enabled := False;
    EdtNatureza.Enabled := False;
    EdtSerie.Enabled := False;
    EdtValDesconto.Enabled := False;
    EdtValFrete.Enabled := False;
    NIGrid.Enabled := False;
    DTEmissao.Enabled := False;
    DtSaida.Enabled := False;
    EdtDadosAdicionais.Enabled := False;
    EdtEspecie.Enabled := False;
    EdtVolumes.Enabled := False;
    EdtPesoB.Enabled := False;
    EdtPesoL.Enabled := False;
    EdtPrazo1.Enabled := False;
    EdtPrazo2.Enabled := False;
    EdtPrazo3.Enabled := False;
    EdtPrazo4.Enabled := False;
    EdtPrazo5.Enabled := False;
    EdtPrazo6.Enabled := False;
    EdtPrazo7.Enabled := False;
    EdtPrazo8.Enabled := False;
    CBPresenca.Enabled := False;
    CBmodFrete.Enabled := False;

    EdtEntidade.Clear;
    EdtNatureza.Clear;
    EdtSerie.Clear;
    EdtValDesconto.Clear;
    EdtValFrete.Clear;
    EdtDadosAdicionais.Clear;
    EdtEspecie.Clear;
    EdtVolumes.Clear;
    EdtPesoB.Clear;
    EdtPesoL.Clear;
    EdtPrazo1.Clear;
    EdtPrazo2.Clear;
    EdtPrazo3.Clear;
    EdtPrazo4.Clear;
    EdtPrazo5.Clear;
    EdtPrazo6.Clear;
    EdtPrazo7.Clear;
    EdtPrazo8.Clear;

    NIGrid.RowCount := 1;
    SBEntidade.Enabled := False;
    SBNatureza.Enabled := False;
    SBMoeda.Enabled := False;
    BtnGravar.Visible := False;
    BtnDesistir.Visible := False;
    btnIncluir.Visible := True;

   ShowMessage('NF-e gravada com sucesso!');
  except
  FatGeralDataModule.Conexão.Rollback;
  ShowMessage('Erro na gravação!');
  end;
end;

procedure TFatGeralForm.EdtValDescontoExit(Sender: TObject);
var i: Integer;
    valorTotal, valorUnitario: Double;
begin
  if EdtValDesconto.Text = '' then begin
  EdtValDesconto.Text := '0'
  end
  else begin
  valorTotal := StrToFloat(EdtValFrete.Text);
  valorUnitario := valorTotal / (NIGrid.RowCount - 1);

  for i := 1 to NIGrid.RowCount - 1 do
    NIGrid.Cells[27, i] := FormatFloat('0.00', valorUnitario);
end;
end;

procedure TFatGeralForm.EdtValFreteExit(Sender: TObject);
var
  i: Integer;
  valorTotal, valorUnitario: Double;
begin
  if EdtValFrete.Text = '' then begin
  EdtValFrete.Text := '0'
  end
  else begin
  valorTotal := StrToFloat(EdtValFrete.Text);
  valorUnitario := valorTotal / (NIGrid.RowCount - 1);

  for i := 1 to NIGrid.RowCount - 1 do
    NIGrid.Cells[28, i] := FormatFloat('0.00', valorUnitario);
end;
end;

procedure TFatGeralForm.FormShow(Sender: TObject);
begin
 NIGrid.Cells[0,0] := 'Produto';
 NIGrid.Cells[1,0] := 'Cor';
 NIGrid.Cells[2,0] := 'Tamanho';
 NIGrid.Cells[3,0] := 'Depósito';
 NIGrid.Cells[4,0] := 'Lote';
 NIGrid.Cells[5,0] := 'Qtde';
 NIGrid.Cells[6,0] := 'Preço_Uni';
 NIGrid.Cells[7,0] := 'Valor';
 NIGrid.Cells[8,0] := 'Natureza';
 NIGrid.Cells[9,0] := 'CST_ICMS';
 NIGrid.Cells[10,0] := 'CSOSN';
 NIGrid.Cells[11,0] := 'ALIQ_ICMS';
 NIGrid.Cells[12,0] := 'Base_ICMS';
 NIGrid.Cells[13,0] := 'Valor_ICMS';
 NIGrid.Cells[14,0] := 'CST_IPI';
 NIGrid.Cells[15,0] := 'ENQ_IPI';
 NIGrid.Cells[16,0] := 'ALIQ_IPI';
 NIGrid.Cells[17,0] := 'Base_IPI';
 NIGrid.Cells[18,0] := 'Valor_IPI';
 NIGrid.Cells[19,0] := 'CST_PIS';
 NIGrid.Cells[20,0] := 'ALIQ_PIS';
 NIGrid.Cells[21,0] := 'Base_PIS';
 NIGrid.Cells[22,0] := 'Valor_PIS';
 NIGrid.Cells[23,0] := 'CST_COFINS';
 NIGrid.Cells[24,0] := 'ALIQ_COFINS';
 NIGrid.Cells[25,0] := 'Base_COFINS';
 NIGrid.Cells[26,0] := 'Valor_COFINS';
 NIGrid.Cells[27,0] := 'Desconto';
 NIGrid.Cells[28,0] := 'Valor_Frete';
 NIGrid.Cells[29,0] := 'cBenef';
 NIGrid.Cells[30,0] := 'cCredPres';
end;

procedure TFatGeralForm.NIGridKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
var FormDeposito: TConsultarDeposito;
    FormProduto: TConsultarProduto;
    FormCor: TConsultarCor;
    FormTamanho: TConsultarTamanho;
    FormCSTICMS: TConsultarCSTICMS;
    FormNatureza: TConsultarNatureza;
    FormCSOSN: TConsultarCSOSN;
    FormCSTIPI: TConsultarCSTIPI;
    FormENQIPI: TConsultarENQIPI;
    FormCSTPIS: TConsultarCSTPIS;
    FormCSTCOFINS: TConsultarCSTCOFINS;
    deposito, produto, cor, tamanho, CST_ICMS, CSOSN, CST_IPI, ENQ_IPI, CST_PIS, CST_COFINS, natureza, descricaocor: string;
begin
  if Key = VK_DOWN then
begin
   if NIGrid.Row = NIGrid.RowCount - 1 then
    begin
      NIGrid.RowCount := NIGrid.RowCount + 1;
      NIGrid.Row := NIGrid.RowCount - 1;
    end;
end;

  if Key = VK_F4 then
begin
  case NIGrid.Col of
    0:
    begin
     CadProdutoModule.ConsultarProduto.SQL.Clear;
     CadProdutoModule.ConsultarProduto.SQL.Text :=
     'select * from cadproduto where ativo = :ativo';
     CadProdutoModule.ConsultarProduto.ParamByName('ativo').AsString := 'S';
     CadProdutoModule.ConsultarProduto.Open;

     FormProduto := TConsultarProduto.Create(Self);
     NIGrid.Cells[0, NIGrid.Row] := FormProduto.SelecionarProduto;
     FormProduto.Free;
    end;

    1:
    begin
      CadCorModule.ConsultarCor.SQL.Clear;
      CadCorModule.ConsultarCor.SQL.Text :=
      'select * from cadcor where ativo = :ativo';
      CadCorModule.ConsultarCor.ParamByName('ativo').AsString := 'S';
      CadCorModule.ConsultarCor.Open;

      FormCor := TConsultarCor.Create(Self);
      cor := FormCor.SelecionarCor;
      descricaocor := FormCor.Descricao;
      NIGrid.Cells[1, NIGrid.Row] := descricaocor;
      FormCor.Free;
    end;

    2:
    begin
      CadTamanhoDataModule.ConsultarTamanho.SQL.Clear;
      CadTamanhoDataModule.ConsultarTamanho.SQL.Text :=
      'select * from cadtamanho where ativo = :ativo';
      CadTamanhoDataModule.ConsultarTamanho.ParamByName('ativo').AsString := 'S';
      CadTamanhoDataModule.ConsultarTamanho.Open;

      FormTamanho := TConsultarTamanho.Create(Self);
      tamanho := FormTamanho.SelecionarTamanho;
      NIGrid.Cells[2, NIGrid.Row] := tamanho;
      FormTamanho.Free;
    end;

    3:
    begin
     CadDepositoDataModule.ConsultarDeposito.SQL.Clear;
     CadDepositoDataModule.ConsultarDeposito.SQL.Text :=
     'select * from caddeposito where ativo = :ativo';
     CadDepositoDataModule.ConsultarDeposito.ParamByName('ativo').AsString := 'S';
     CadDepositoDataModule.ConsultarDeposito.Open;

     FormDeposito := TConsultarDeposito.Create(Self);
     deposito := FormDeposito.SelecionarDeposito;
     NIGrid.Cells[3, NIGrid.Row] := deposito;
     FormDeposito.Free;
    end;

    8:
    begin
     CadNaturezaDataModule.ConsultarNatureza.SQL.Clear;
     CadNaturezaDataModule.ConsultarNatureza.SQL.Text :=
     'select * from cadnatureza where ativo = :ativo';
     CadNaturezaDataModule.ConsultarNatureza.ParamByName('ativo').AsString := 'S';
     CadNaturezaDataModule.ConsultarNatureza.Open;

     FormNatureza := TConsultarNatureza.Create(Self);
     Natureza := FormNatureza.SelecionarNatureza;
     NIGrid.Cells[8, NIGrid.Row] := natureza;
     FormNatureza.Free;
    end;

    9:
    begin
     CadCSTICMSDataModule.ConsultarCSTICMS.SQL.Clear;
     CadCSTICMSDataModule.ConsultarCSTICMS.SQL.Text :=
     'select * from cadcsticms where ativo = :ativo';
     CadCSTICMSDataModule.ConsultarCSTICMS.ParamByName('ativo').AsString := 'S';
     CadCSTICMSDataModule.ConsultarCSTICMS.Open;

     FormCSTICMS := TConsultarCSTICMS.Create(Self);
     CST_ICMS := FormCSTICMS.SelecionarICMSCST;
     NIGrid.Cells[9, NIGrid.Row] := CST_ICMS;
     FormCSTICMS.Free
    end;

    10:
    begin
     CadCSOSNDataModule.ConsultarCSOSN.SQL.Clear;
     CadCSOSNDataModule.ConsultarCSOSN.SQL.Text :=
     'select * from cadcsosn where ativo = :ativo';
     CadCSOSNDataModule.ConsultarCSOSN.ParamByName('ativo').AsString := 'S';
     CadCSOSNDataModule.ConsultarCSOSN.Open;

     FormCSOSN := TConsultarCSOSN.Create(Self);
     CSOSN := FormCSOSN.SelecionarCSOSN;
     NIGrid.Cells[10, NIGrid.Row] := CSOSN;
     FormCSOSN.Free;
    end;

    14:
    begin
     CadCSTIPIDataModule.ConsultarCSTIPI.SQL.Clear;
     CadCSTIPIDataModule.ConsultarCSTIPI.SQL.Text :=
     'select * from cadcstipi where ativo = :ativo';
     CadCSTIPIDataModule.ConsultarCSTIPI.ParamByName('ativo').AsString := 'S';
     CadCSTIPIDataModule.ConsultarCSTIPI.Open;

     FormCSTIPI := TConsultarCSTIPI.Create(Self);
     CST_IPI := FormCSTIPI.SelecionarCstIPI;
     NIGrid.Cells[14, NIGrid.Row] := CST_IPI;
     FormCSTIPI.Free
    end;

    15:
    begin
     CadENQIPIDataModule.ConsultarENQIPI.SQL.Clear;
     CadENQIPIDataModule.ConsultarENQIPI.SQL.Text :=
     'select * from cadenqipi where ativo = :ativo';
     CadENQIPIDataModule.ConsultarENQIPI.ParamByName('ativo').AsString := 'S';
     CadENQIPIDataModule.ConsultarENQIPI.Open;

     FormENQIPI := TConsultarENQIPI.Create(Self);
     ENQ_IPI := FormENQIPI.SelecionarENQIPI;
     NIGrid.Cells[15, NIGrid.Row] := ENQ_IPI;
     FormENQIPI.Free;
    end;

    19:
    begin
     CadCSTPISDataModule.ConsultarCSTPIS.SQL.Clear;
     CadCSTPISDataModule.ConsultarCSTPIS.SQL.Text :=
     'select * from cadcstpis where ativo = :ativo';
     CadCSTPISDataModule.InsertQuery.ParamByName('ativo').AsString := 'S';
     CadCSTPISDataModule.ConsultarCSTPIS.Open;

     FormCSTPIS := TConsultarCSTPIS.Create(Self);
     CST_PIS := FormCSTPIS.SelecionarPisCST;
     NIGrid.Cells[19, NIGrid.Row] := CST_PIS;
     FormCSTPIS.Free;
    end;

    23:
    begin
     CadCSTCOFINSDataModule.ConsultarCSTCOFINS.SQL.Clear;
     CadCSTCOFINSDataModule.ConsultarCSTCOFINS.SQL.Text :=
     'select * from cadcstcofins where ativo = :ativo';
     CadCSTCOFINSDataModule.ConsultarCSTCOFINS.ParamByName('ativo').AsString := 'S';
     CadCSTCOFINSDataModule.ConsultarCSTCOFINS.Open;

     FormCSTCOFINS := TConsultarCSTCOFINS.Create(Self);
     CST_COFINS := FormCSTCOFINS.SelecionarCofinsCST;
     NIGrid.Cells[23, NIGrid.Row] := CST_COFINS;
     FormCSTCOFINS.Free;
    end;
end;
end;
end;

procedure TFatGeralForm.SBEntidadeClick(Sender: TObject);
var codigo, nome: string;
begin
 CadEntidadeDataModule.ConsultarEntidade.SQL.Clear;
 CadEntidadeDataModule.ConsultarEntidade.SQL.Text :=
 'select * from cadentidade where ativo = :ativo';
 CadEntidadeDataModule.ConsultarEntidade.ParamByName('ativo').AsString := 'S';
 CadEntidadeDataModule.ConsultarEntidade.Open;

 Application.CreateForm(TConsultarEntidade, ConsultarEntidade);

 codigo := ConsultarEntidade.SelecionarEntidade;

 Nome := ConsultarEntidade.nome;
 EdtEntidade.Text := Nome;
end;

procedure TFatGeralForm.SBMoedaClick(Sender: TObject);
var codigo: string;
begin
 CadMoedaDM.
end;

procedure TFatGeralForm.SBNaturezaClick(Sender: TObject);
var natureza, cBenef, cCredPres, cst_icms, csosn, cst_ipi, enq_ipi, cst_pis, cst_cofins, aliq_icms, aliq_ipi, aliq_cofins, aliq_pis: string;
    i: integer;
begin
  CadNaturezaDataModule.ConsultarNatureza.SQL.Clear;
  CadNaturezaDataModule.ConsultarNatureza.SQL.Text :=
  'select * from cadnatureza where ativo = :ativo';
  CadNaturezaDataModule.ConsultarNatureza.ParamByName('ativo').AsString := 'S';
  CadNaturezaDataModule.ConsultarNatureza.Open;

  Application.CreateForm(TConsultarNatureza, ConsultarNatureza);
  natureza := ConsultarNatureza.SelecionarNatureza;
  if natureza <> '' then
  begin
    EdtNatureza.Text := natureza;
    for i := 1 to NIGrid.RowCount - 1 do
    NIGrid.Cells[8, i] := natureza;

    cBenef := ConsultarNatureza.cBenef;
    for i := 1 to NIGrid.RowCount - 1 do
    NIGrid.Cells[29,i] := cBenef;

    cCredPres := ConsultarNatureza.cCredPres;
    for i := 1 to NIGrid.RowCount - 1 do
    NIGrid.Cells[30,i] := cCredPres;

    enq_ipi := ConsultarNatureza.enq_ipi;
    for i := 1 to NIGrid.RowCount - 1 do
    NIGrid.Cells[15,i] := enq_ipi;

    cst_icms := ConsultarNatureza.cst_icms;
    for i := 1 to NIGrid.RowCount - 1 do
    NIGrid.Cells[9,i] := cst_icms;

    csosn := ConsultarNatureza.csosn;
    for i := 1 to NIGrid.RowCount - 1 do
    NIGrid.Cells[10,i] := csosn;

    cst_ipi := ConsultarNatureza.cst_ipi;
    for i := 1 to NIGrid.RowCount - 1 do
    NIGrid.Cells[14,i] := cst_ipi;

    cst_pis := ConsultarNatureza.cst_pis;
    for i := 1 to NIGrid.RowCount - 1 do
    NIGrid.Cells[19,i] := cst_pis;

    cst_cofins := ConsultarNatureza.cst_cofins;
    for i := 1 to NIGrid.RowCount - 1 do
    NIGrid.Cells[23,i] := cst_cofins;

    aliq_icms := ConsultarNatureza.Aliq_icms;
    for i := 1 to NIGrid.RowCount - 1 do
    NIGrid.Cells[11,i] := aliq_icms;

    aliq_ipi := ConsultarNatureza.aliq_ipi;
    for i := 1 to NIGrid.RowCount - 1 do
    NIGrid.Cells[16,i] := aliq_ipi;

    aliq_pis := ConsultarNatureza.aliq_pis;
    for i := 1 to NIGrid.RowCount - 1 do
    NIGrid.Cells[20,i] := aliq_pis;

    aliq_cofins := ConsultarNatureza.aliq_cofins;
    for i := 1 to NIGrid.RowCount - 1 do
    NIGrid.Cells[24,i] := aliq_cofins;
  end;
end;

end.
