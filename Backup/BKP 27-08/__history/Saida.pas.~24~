unit Saida;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls, Vcl.Grids, Vcl.ComCtrls,
  SaidaDataModule,
  Log, LogDataModule;

type
  TMovSaida = class(TForm)
    Panel1: TPanel;
    btnDesistir: TButton;
    btnGravar: TButton;
    btnIncluir: TButton;
    btnIncluirGrid: TButton;
    CBoxCor: TComboBox;
    CBoxDeposito: TComboBox;
    CBoxProduto: TComboBox;
    CBoxTamanho: TComboBox;
    edtLote: TEdit;
    EdtQtde: TEdit;
    Grid: TStringGrid;
    lblCodigoCor: TLabel;
    lblCodigoDeposito: TLabel;
    lblCodigoProduto: TLabel;
    lblCodigoTamanho: TLabel;
    lblLote: TLabel;
    lblQtde: TLabel;
    btnFechar: TButton;
    procedure FormShow(Sender: TObject);
    procedure CBoxProdutoDropDown(Sender: TObject);
    procedure CBoxCorDropDown(Sender: TObject);
    procedure CBoxTamanhoDropDown(Sender: TObject);
    procedure CBoxDepositoDropDown(Sender: TObject);
    procedure btnIncluirClick(Sender: TObject);
    procedure btnIncluirGridClick(Sender: TObject);
    procedure btnGravarClick(Sender: TObject);
    procedure btnDesistirClick(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);
  private
    { Private declarations }
  public
    procedure LimparTudo;
  end;

var
  MovSaida: TMovSaida;

implementation

{$R *.dfm}

procedure TMovSaida.LimparTudo;
begin
 CBoxProduto.clear;
 CBoxCor.clear;
 CBoxTamanho.clear;
 EdtLote.clear;
 CBoxDeposito.clear;
 EdtQtde.clear;

 BtnIncluir.visible := True;

 BtnGravar.Visible := False;
 BtnDesistir.Visible := False;
 BtnIncluirGrid.Visible := False;

 CBoxProduto.Enabled := False;
 CBoxDeposito.Enabled := False;
 CBoxTamanho.Enabled := False;
 CBoxCor.Enabled := False;
 EdtQtde.Enabled := False;
 EdtLote.Enabled := False;

 Grid.RowCount := 1
end;

procedure TMovSaida.FormShow(Sender: TObject);
var i: Integer;
begin
 Grid.FixedRows := 0;
 Grid.Cells[0,0] := 'Código';
 Grid.Cells[1,0] := 'Cor';
 Grid.Cells[2,0] := 'Tamanho';
 Grid.Cells[3,0] := 'Lote';
 Grid.Cells[4,0] := 'Depósito';
 Grid.Cells[5,0] := 'Qtde';
end;

procedure TMovSaida.CBoxProdutoDropDown(Sender: TObject);
begin
  CBoxProduto.Items.Clear;

  MovSaidaDataModule.CBProduto.Close;
  MovSaidaDataModule.CBProduto.Open;

  while not MovSaidaDataModule.CBProduto.Eof do
  begin
    CBoxProduto.Items.Add(MovSaidaDataModule.CBProduto.FieldByName('codigo').AsString);
    MovSaidaDataModule.CBProduto.Next;
  end;

  MovSaidaDataModule.CBProduto.Close;
end;

procedure TMovSaida.CBoxCorDropDown(Sender: TObject);
begin
  CBoxCor.Items.Clear;

  MovSaidaDataModule.CBCor.Close;
  MovSaidaDataModule.CBCor.Open;

  while not MovSaidaDataModule.CBCor.Eof do
  begin
    CBoxCor.Items.Add(MovSaidaDataModule.CBCor.FieldByName('cor').AsString);
    MovSaidaDataModule.CBCor.Next;
  end;

  MovSaidaDataModule.CBCor.Close;
end;

procedure TMovSaida.CBoxTamanhoDropDown(Sender: TObject);
begin
  CBoxTamanho.Items.Clear;

  MovSaidaDataModule.CBTamanho.Close;
  MovSaidaDataModule.CBTamanho.SQL.Text :=
  'SELECT ct.codigo FROM CadTamanho ct ' +
  'INNER JOIN CadFaixa cf ON CONCAT(" / ", cf.descricao, " / ") LIKE CONCAT("% / ", ct.descricao, " / %") ' +
  'inner join cadproduto cp on (cp.faixa = cf.codigo) ' +
  'WHERE ct.ativo = "S" and cf.ativo = "S"';
  MovSaidaDataModule.CBTamanho.Open;

  while not MovSaidaDataModule.CBTamanho.Eof do
  begin
    CBoxTamanho.Items.Add(MovSaidaDataModule.CBTamanho.FieldByName('tamanho').AsString);
    MovSaidaDataModule.CBTamanho.Next;
  end;

  MovSaidaDataModule.CBTamanho.Close;
end;

procedure TMovSaida.CBoxDepositoDropDown(Sender: TObject);
begin
  CBoxDeposito.Items.Clear;

  MovSaidaDataModule.CBDeposito.Close;
  MovSaidaDataModule.CBDeposito.Open;

  while not MovSaidaDataModule.CBDeposito.Eof do
  begin
    CBoxDeposito.Items.Add(MovSaidaDataModule.CBDeposito.FieldByName('deposito').AsString);
    MovSaidaDataModule.CBDeposito.Next;
  end;

  MovSaidaDataModule.CBDeposito.Close;
end;

procedure TMovSaida.BtnIncluirClick(Sender: TObject);
begin
  BtnIncluir.Visible := False;

  BtnGravar.Visible := True;
  BtnDesistir.Visible := True;
  BtnIncluirGrid.Visible := True;

  CBoxProduto.Enabled := True;
  CBoxDeposito.Enabled := True;
  CBoxTamanho.Enabled := True;
  CBoxCor.Enabled := True;
  EdtQtde.Enabled :=True;
  EdtLote.Enabled :=True;
end;

procedure TMovSaida.BtnIncluirGridClick(Sender: TObject);
var codigo, cor, tamanho, lote, deposito, qtde: string;
    novalinha: integer;
begin
 IF
 CBoxProduto.Text = '' THEN
 ShowMessage('Codigo não pode ser vazio')
 else begin
 IF
 CBoxCor.Text = '' THEN
 ShowMessage('Cor não pode ser vazia')
 else begin
 IF
 CBoxTamanho.Text = '' THEN
 ShowMessage('Tamanho não pode ser vazio')
 else begin
 IF
 EdtLote.Text = '' THEN
 EdtLote.Text := '000000'
 else begin
 IF
 CBoxDeposito.Text = '' THEN
 ShowMessage('Deposito não pode ser vazio')
 else begin
 IF
 EdtQtde.Text = '' THEN
 ShowMessage('Quantidade não pode ser vazio')
 else begin
 codigo := CBoxProduto.Text;
 cor := CBoxCor.Text;
 tamanho := CBoxTamanho.Text;
 Lote := EdtLote.Text;
 Deposito := CBoxDeposito.Text;
 Qtde := EdtQtde.Text;

 novalinha := Grid.RowCount;
 Grid.RowCount := novalinha + 1;
 Grid.Cells[0, novaLinha] := codigo;
 Grid.Cells[1, novaLinha] := cor;
 Grid.Cells[2, novaLinha] := tamanho;
 Grid.Cells[3, novaLinha] := lote;
 Grid.Cells[4, novaLinha] := deposito;
 Grid.Cells[5, novaLinha] := qtde;

 CBoxProduto.clear;
 CBoxCor.clear;
 CBoxTamanho.clear;
 EdtLote.clear;
 CBoxDeposito.clear;
 EdtQtde.clear;
end;
end;
end;
end;
end;
end;
end;

procedure TMovSaida.BtnGravarClick(Sender: TObject);
var i: Integer;
    codigo, tamanho, cor, deposito, lote, qtde, tipo, tela: string;
    datahoje: TDateTime;
begin
for i := 1 to Grid.RowCount - 1 do
begin
 codigo   := Grid.Cells[0, i];
 cor      := Grid.Cells[1, i];
 tamanho  := Grid.Cells[2, i];
 lote     := Grid.Cells[3, i];
 deposito := Grid.Cells[4, i];
 qtde     := Grid.Cells[5, i];
 tipo := 'S';
 DataHoje := Now;
 tela := 'MovSaida';

 MovSaidaDataModule.selectQuery.Close;
 MovSaidaDataModule.selectQuery.SQL.Clear;
 MovSaidaDataModule.selectQuery.SQL.Text :=
 'SELECT * FROM estoque WHERE codigo=:codigo AND tamanho=:tamanho AND cor=:cor AND deposito=:deposito AND lote=:lote';
 MovSaidaDataModule.selectQuery.ParamByName('codigo').AsString := codigo;
 MovSaidaDataModule.selectQuery.ParamByName('tamanho').AsString := tamanho;
 MovSaidaDataModule.selectQuery.ParamByName('cor').AsString := cor;
 MovSaidaDataModule.selectQuery.ParamByName('deposito').AsString := deposito;
 MovSaidaDataModule.selectQuery.ParamByName('lote').AsString := lote;
 MovSaidaDataModule.selectQuery.Open;

 if MovSaidaDataModule.selectQuery.IsEmpty then
 begin
 ShowMessage('Não encontrado no Estoque!');
 Limpartudo;
 end
 else begin

 MovSaidaDataModule.updatequery.SQL.Clear;
 MovSaidaDataModule.updatequery.SQL.Text :=
 'UPDATE estoque SET qtde = qtde - :qtde ' +
 'WHERE codigo = :codigo AND tamanho = :tamanho AND cor = :cor AND deposito = :deposito AND lote = :lote';
 MovSaidaDataModule.updatequery.ParamByName('qtde').AsString := qtde;
 MovSaidaDataModule.updatequery.ParamByName('codigo').AsString := codigo;
 MovSaidaDataModule.updatequery.ParamByName('tamanho').AsString := tamanho;
 MovSaidaDataModule.updatequery.ParamByName('cor').AsString := cor;
 MovSaidaDataModule.updatequery.ParamByName('deposito').AsString := deposito;
 MovSaidaDataModule.updatequery.ParamByName('lote').AsString := lote;

 MovSaidaDataModule.InsertQuery.SQL.Clear;
 MovSaidaDataModule.InsertQuery.SQL.Text :=
 'insert into prodmov (codigo, cor, tamanho, deposito, lote, qtde, data, tipo) ' +
 'values ' +
 '(:codigo, :cor, :tamanho, :deposito, :lote, :qtde, :data, :tipo)';
 MovSaidaDataModule.InsertQuery.ParamByName('qtde').AsString := qtde;
 MovSaidaDataModule.InsertQuery.ParamByName('codigo').AsString := codigo;
 MovSaidaDataModule.InsertQuery.ParamByName('tamanho').AsString := tamanho;
 MovSaidaDataModule.InsertQuery.ParamByName('cor').AsString := cor;
 MovSaidaDataModule.InsertQuery.ParamByName('deposito').AsString := deposito;
 MovSaidaDataModule.InsertQuery.ParamByName('lote').AsString := lote;
 MovSaidaDataModule.InsertQuery.ParamByName('tipo').AsString := tipo;
 MovSaidaDataModule.InsertQuery.ParamByName('data').AsDateTime := DataHoje;

 LogModule.InserirLog.SQL.Clear;
 LogModule.InserirLog.SQL.Text :=
 'insert into logs (descricao, tela, data) values (:descricao, :tela, :data)';
 LogModule.InserirLog.ParamByName('descricao').AsString :=
 'Fez saída manual no código ' + codigo + ' na cor ' + cor + ' no tamanho ' + tamanho + ' no depósito ' + deposito + ' no lote ' + lote + ' em ' + qtde + ' quantidade(s)';
 LogModule.InserirLog.ParamByName('tela').AsString := tela;
 LogModule.InserirLog.ParamByName('data').AsDatetime := Datahoje;

 try
 MovSaidaDataModule.updatequery.ExecSQL;
 MovSaidaDataModule.InsertQuery.ExecSQL;
 LogModule.InserirLog.ExecSQL;
 ShowMessage('Gravado com sucesso!');
 limpartudo;
 except
 ShowMessage('Erro na gravação');
 end;
end;
end;
end;

procedure TMovSaida.BtnDesistirClick(Sender: TObject);
begin
 Limpartudo;
end;

procedure TMovSaida.btnFecharClick(Sender: TObject);
begin
 (Parent as TTabSheet).PageControl := nil;
 Parent.Free;
end;
end.
