unit Deposito;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls, Vcl.ComCtrls,
  DepositoDataModule, ConsultarDepositoForm,
  Log, LogDataModule,
  GlobalUnit;

type
  TCadDeposito = class(TForm)
    Panel1: TPanel;
    lblCodigo: TLabel;
    LblDescricao: TLabel;
    lblAtivo: TLabel;
    CBAtivo: TCheckBox;
    EdtDescricao: TEdit;
    EdtCodigo: TEdit;
    btnIncluir: TButton;
    BtnGravarAlterar: TButton;
    btnGravarIncluir: TButton;
    btnAlterar: TButton;
    btnDesistir: TButton;
    btnConsultar: TButton;
    btnExcluir: TButton;
    btnFechar: TButton;
    procedure btnIncluirClick(Sender: TObject);
    procedure btnGravarIncluirClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure BtnGravarAlterarClick(Sender: TObject);
    procedure btnDesistirClick(Sender: TObject);
    procedure btnExcluirClick(Sender: TObject);
    procedure btnConsultarClick(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  CadDeposito: TCadDeposito;

implementation

{$R *.dfm}

procedure TCadDeposito.btnIncluirClick(Sender: TObject);
begin
  EdtCodigo.Clear;
  EdtDescricao.Clear;

  BtnIncluir.Visible := False;
  BtnAlterar.Visible := False;
  BtnConsultar.Visible:= False;
  BtnExcluir.Visible := False;

  BtnGravarIncluir.Visible := True;
  BtnDesistir.Visible := True;

  EdtCodigo.Enabled := True;
  EdtDescricao.Enabled := True;
  CBAtivo.Enabled := True;
end;

procedure TCadDeposito.btnGravarIncluirClick(Sender: TObject);
var codigo, descricao, ativo: string;
begin
 codigo:= EdtCodigo.Text;
 descricao:= EdtDescricao.Text;
 if CBAtivo.Checked then ativo := 'S'
 else ativo := 'N';

  if EdtCodigo.Text = '' then begin
  ShowMessage('Código não pode ser vazio!');
  end
  else begin

  if EdtDescricao.Text = '' then begin
  ShowMessage('Descrição não pode ser vazia!');
  end
  else begin

 CadDepositoDataModule.SelectQuery.SQL.Clear;
 CadDepositoDataModule.SelectQuery.SQL.Text :=
 'SELECT * FROM cadDeposito WHERE codigo=:codigo';
 CadDepositoDataModule.SelectQuery.ParamByName('codigo').AsString := codigo;
 CadDepositoDataModule.SelectQuery.Open;

 if NOT CadDepositoDataModule.SelectQuery.IsEmpty then begin
 showmessage('Deposito já cadastrado!');
 end
 else begin
 CadDepositoDataModule.InsertQuery.SQL.Clear;
 CadDepositoDataModule.InsertQuery.SQL.Text := 'insert into cadDeposito (codigo, descricao, ativo) values (:codigo, :descricao, :ativo)';
 CadDepositoDataModule.InsertQuery.ParamByName('codigo').AsString := codigo;
 CadDepositoDataModule.InsertQuery.ParamByName('descricao').AsString := descricao;
 CadDepositoDataModule.InsertQuery.ParamByName('ativo').AsString := ativo;

 LogModule.InserirLog.SQL.Clear;
 LogModule.InserirLog.SQL.Text :=
 'insert into logs (descricao, tela, data, usuario, emp_id) values (:descricao, :tela, :data, :usuario, :emp_id)';
 LogModule.InserirLog.ParamByName('descricao').AsString :=
 'Inseriu o depósito ' + descricao + ' no código ' + codigo + ' e ativo ' + ativo;
 LogModule.InserirLog.ParamByName('tela').AsString := 'CadDeposito';
 LogModule.InserirLog.ParamByName('data').AsDatetime := Now;
 LogModule.InserirLog.ParamByName('usuario').AsString := UsuarioLogado;
 LogModule.InserirLog.ParamByName('emp_id').AsString := EmpresaLogada;
 try
 CadDepositoDataModule.InsertQuery.ExecSQL;
 LogModule.InserirLog.ExecSQL;
 ShowMessage('Gravado com sucesso!');
 BtnIncluir.Visible := True;
 BtnAlterar.Visible := True;
 BtnConsultar.Visible := True;
 BtnExcluir.Visible := True;

 BtnGravarIncluir.Visible := False;
 BtnDesistir.Visible := False;

 EdtCodigo.Enabled := False;
 EdtDescricao.Enabled := False;
 CBAtivo.Enabled := False;
 except
 ShowMessage('Erro na gravação!');
 end;
end;
end;
end;
end;

procedure TCadDeposito.btnAlterarClick(Sender: TObject);
begin
  if EdtCodigo.Text = '' then begin
  ShowMessage('Nenhum deposito selecionado!')
  end
  else begin
  BtnIncluir.Visible := False;
  BtnGravarIncluir.Visible := False;
  BtnConsultar.Visible := False;
  BtnAlterar.Visible := False;
  BtnExcluir.Visible := False;

  EdtDescricao.Enabled := True;
  CBAtivo.Enabled := True;

  BtnGravarAlterar.Visible := True;
  BtnDesistir.Visible := True;
end;
end;

procedure TCadDeposito.BtnGravarAlterarClick(Sender: TObject);
var codigo, descricao, ativo: string;
begin
 codigo:= EdtCodigo.Text;
 descricao:= EdtDescricao.Text;
 if CBAtivo.Checked then ativo := 'S'
 else ativo := 'N';

  if EdtCodigo.Text = '' then begin
  ShowMessage('Código não pode ser vazio!');
  end
  else begin

  if EdtDescricao.Text = '' then begin
  ShowMessage('Descrição não pode ser vazia!');
  end
  else begin

 CadDepositoDataModule.UpdateQuery.SQL.Clear;
 CadDepositoDataModule.UpdateQuery.SQL.Text :=
 'update cadDeposito set descricao = :descricao, ativo = :ativo where codigo = :codigo';
 CadDepositoDataModule.UpdateQuery.ParamByName('codigo').AsString := codigo;
 CadDepositoDataModule.UpdateQuery.ParamByName('descricao').AsString := descricao;
 CadDepositoDataModule.UpdateQuery.ParamByName('ativo').AsString := ativo;

 LogModule.InserirLog.SQL.Clear;
 LogModule.InserirLog.SQL.Text :=
 'insert into logs (descricao, tela, data, emp_id, usuario) values (:descricao, :tela, :data, :emp_id, :usuario)';
 LogModule.InserirLog.ParamByName('descricao').AsString :=
 'Alterou o depósito ' + descricao + ' no código ' + codigo + ' e ativo ' + ativo;
 LogModule.InserirLog.ParamByName('tela').AsString := 'CadDeposito';
 LogModule.InserirLog.ParamByName('data').AsDatetime := Now;
 LogModule.InserirLog.ParamByName('usuario').AsString := UsuarioLogado;
 LogModule.InserirLog.ParamByName('emp_id').AsString := EmpresaLogada;
 try
 CadDepositoDataModule.UpdateQuery.ExecSQL;
 LogModule.InserirLog.ExecSQL;
 ShowMessage('Gravado com sucesso!');
 BtnIncluir.Visible := True;
 BtnAlterar.Visible := True;
 BtnConsultar.Visible := True;
 BtnExcluir.Visible := True;

 BtnGravarIncluir.Visible := False;
 BtnDesistir.Visible := False;
 BtnGravarAlterar.Visible := False;

 EdtCodigo.Enabled := False;
 EdtDescricao.Enabled := False;
 CBAtivo.Enabled := False;
 except
 ShowMessage('Erro na gravação!');
 end;
end;
end;
end;

procedure TCadDeposito.btnConsultarClick(Sender: TObject);
var
  codigo, descricao, ativo: string;
begin
  CadDepositoDataModule.FDQuery.Close;
  CadDepositoDataModule.FDQuery.Open;
  Application.CreateForm(TConsultarDeposito, ConsultarDeposito);
  codigo := ConsultarDeposito.SelecionarDeposito;
  if codigo <> '' then
  begin
    descricao := ConsultarDeposito.Descricao;
    EdtCodigo.Text := codigo;
    EdtDescricao.Text := descricao;
    ativo := ConsultarDeposito.Ativo;
    CBAtivo.Checked := ativo = 'S';
  end;
end;

procedure TCadDeposito.btnDesistirClick(Sender: TObject);
begin
  EdtCodigo.Clear;
  EdtDescricao.Clear;

  EdtCodigo.Enabled := False;
  EdtDescricao.Enabled := False;
  CBAtivo.Enabled := False;

  BtnGravarIncluir.Visible := False;
  BtnDesistir.Visible := False;
  BtnGravarAlterar.Visible := False;

  BtnIncluir.Visible := True;
  BtnAlterar.Visible := True;
  BtnConsultar.Visible := True;
  BtnExcluir.Visible := True;
end;

procedure TCadDeposito.btnExcluirClick(Sender: TObject);
var codigo, descricao, ativo, tela: string;
    data: tdatetime;
begin
 codigo:= EdtCodigo.Text;
 data := now;
 tela := 'CadDeposito';
 descricao := EdtDescricao.text;
 if CBAtivo.Checked then ativo := 'S'
 else ativo := 'N';

 CadDepositoDataModule.FDQuery1.SQL.Clear;
 CadDepositoDataModule.FDQuery1.SQL.Text :=
 'SELECT * FROM estoque WHERE deposito = :codigo';
 CadDepositoDataModule.FDQuery1.ParamByName('codigo').AsString := codigo;
 CadDepositoDataModule.FDQuery1.Open;

 if not CadDepositoDataModule.FDQuery1.IsEmpty then begin
 ShowMessage('Depósito está sendo usado no estoque, favor verifique!');
 end
 else begin

 CadDepositoDataModule.FDQuery1.SQL.Clear;
 CadDepositoDataModule.FDQuery1.SQL.Text :=
 'SELECT * FROM CADDEPOSITO WHERE CODIGO = :codigo';
 CadDepositoDataModule.FDQuery1.ParamByName('codigo').AsString := codigo;
 CadDepositoDataModule.FDQuery1.Open;

 if CadDepositoDataModule.FDQuery1.IsEmpty then begin
 ShowMessage('Deposito não encontrado!')
 end
 else begin
 CadDepositoDataModule.FDQuery1.SQL.Clear;
 CadDepositoDataModule.FDQuery1.SQL.Text := 'delete from caddeposito where codigo = :codigo';
 CadDepositoDataModule.FDQuery1.ParamByName('codigo').AsString := codigo;

 LogModule.InserirLog.SQL.Clear;
 LogModule.InserirLog.SQL.Text :=
 'insert into logs (descricao, tela, data, emp_id, usuario) values (:descricao, :tela, :data, :emp_id, :usuario)';
 LogModule.InserirLog.ParamByName('descricao').AsString :=
 'Deletou o depósito ' + descricao + ' no código ' + codigo + ' e ativo ' + ativo;
 LogModule.InserirLog.ParamByName('tela').AsString := tela;
 LogModule.InserirLog.ParamByName('data').AsDatetime := Data;
 LogModule.InserirLog.ParamByName('usuario').AsString := UsuarioLogado;
 LogModule.InserirLog.ParamByName('emp_id').AsString := EmpresaLogada;
 try
 CadDepositoDataModule.FDQuery1.ExecSQL;
 LogModule.InserirLog.ExecSQL;
 ShowMessage('Excluído com sucesso!');
 EdtCodigo.Clear;
 EdtDescricao.Clear;
 except
 ShowMessage('Erro na gravação!');
 end;
end;
end;
end;

procedure TCadDeposito.btnFecharClick(Sender: TObject);
begin
   begin
    (Parent as TTabSheet).PageControl := nil;
    Parent.Free;
  end;
end;

end.
