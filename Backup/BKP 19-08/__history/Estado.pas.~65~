unit Estado;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics, Vcl.ComCtrls,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls, Vcl.Grids,
  Data.DB, Vcl.DBGrids, Vcl.Buttons,
  EstadoDataModule,
  ConsultarPaisForm, PaisDataModule,
  Log, LogDataModule,
  GlobalUnit;

type
  TCadEstado = class(TForm)
    Panel1: TPanel;
    lblCodigo: TLabel;
    lblEstado: TLabel;
    lblAtivo: TLabel;
    CBAtivo: TCheckBox;
    EdtCodigo: TEdit;
    EdtEstado: TEdit;
    btnIncluir: TButton;
    btnGravarIncluir: TButton;
    btnAlterar: TButton;
    btnGravarAlterar: TButton;
    btnExcluir: TButton;
    lblPais: TLabel;
    EdtPais: TEdit;
    Grid: TDBGrid;
    btnDesistir: TButton;
    SBPais: TSpeedButton;
    btnFechar: TButton;
    procedure btnIncluirClick(Sender: TObject);
    procedure btnGravarIncluirClick(Sender: TObject);
    procedure btnDesistirClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure btnGravarAlterarClick(Sender: TObject);
    procedure btnExcluirClick(Sender: TObject);
    procedure GridCellClick(Column: TColumn);
    procedure SBPaisClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  CadEstado: TCadEstado;

implementation

{$R *.dfm}

procedure TCadEstado.btnIncluirClick(Sender: TObject);
begin
 CadEstadoModule.FDQuery1.Close;
 CadEstadoModule.FDQuery1.Open;

 EdtCodigo.Clear;
 EdtEstado.Clear;
 EdtPais.Clear;
 EdtCodigo.Enabled := True;
 CBAtivo.Enabled := True;
 EdtEstado.Enabled := True;
 EdtPais.Enabled := True;
 SBPais.Enabled := True;

 btnIncluir.Visible := False;
 btnExcluir.Visible := False;
 btnAlterar.Visible := False;
 btnGravarAlterar.Visible := False;

 btnGravarIncluir.Visible := True;
 btnDesistir.Visible := True;
end;

procedure TCadEstado.btnGravarIncluirClick(Sender: TObject);
var codigo, estado, pais, ativo, tela: string;
    data: tdatetime;
begin
  codigo := EdtCodigo.Text;
  Estado := EdtEstado.Text;
  Pais := EdtPais.Text;
  if CBAtivo.Checked then ativo := 'S'
  else ativo := 'N';
  data := now;
  tela := 'CadEstado';

  if EdtCodigo.Text = '' then begin
  ShowMessage('Código não pode ser vazio!');
  end
  else begin

  if EdtEstado.Text = '' then begin
  ShowMessage('Estado não pode ser vazio!');
  end
  else begin

 if EdtPais.Text = '' then begin
 ShowMessage('País não pode ser vazio!');
 end
 else begin

  CadEstadoModule.FDQuery.Close;
  CadEstadoModule.FDQuery.SQL.Text :=
  'select * from cadestado where codigo = :codigo';

  CadEstadoModule.FDQuery.ParamByName('codigo').AsString := codigo;
  CadEstadoModule.FDQuery.Open;

  if not CadEstadoModule.FDQuery.IsEmpty then
  begin ShowMessage('Estado já cadastrado!')
  end
  else begin
  CadEstadoModule.FDQuery.Close;
  CadEstadoModule.FDQuery.SQL.Text :=
  'insert into cadestado (codigo, estado, pais, ativo) values (:codigo, :estado, :pais, :ativo)';
  CadEstadoModule.FDQuery.ParamByName('codigo').AsString := codigo;
  CadEstadoModule.FDQuery.ParamByName('estado').AsString := estado;
  CadEstadoModule.FDQuery.ParamByName('pais').AsString := pais;
  CadEstadoModule.FDQuery.ParamByName('ativo').AsString := ativo;

  LogModule.InserirLog.SQL.Clear;
  LogModule.InserirLog.SQL.Text :=
  'insert into logs (descricao, tela, data, emp_id, usuario) values (:descricao, :tela, :data, :emp_id, :usuario)';
  LogModule.InserirLog.ParamByName('descricao').AsString :=
  'Inseriu o Estado ' + Estado + ' no país ' + pais + ' no código ' + codigo + ' e ativo ' + ativo;
  LogModule.InserirLog.ParamByName('tela').AsString := tela;
  LogModule.InserirLog.ParamByName('data').AsDatetime := Data;
  LogModule.InserirLog.ParamByName('usuario').AsString := UsuarioLogado;
 LogModule.InserirLog.ParamByName('emp_id').AsString := EmpresaLogada;
  try
  CadEstadoModule.FDQuery.ExecSQL;
  logmodule.InserirLog.ExecSQL;
  ShowMessage('Gravado com sucesso');
  EdtCodigo.Enabled := False;
  CBAtivo.Enabled := False;
  EdtEstado.Enabled := False;
  EdtPais.Enabled := False;

  btnIncluir.Visible := True;
  btnExcluir.Visible := True;
  btnAlterar.Visible := True;
  SBPais.Enabled := False;
  btnGravarAlterar.Visible := False;
  btnGravarIncluir.Visible := False;
  btnDesistir.Visible := False;

  CadEstadoModule.FDQuery1.Close;
  CadEstadoModule.FDQuery1.Open;
  except
  ShowMessage('Erro na gravação, operação abortada!');
  end;
  end;
end;
end;
end;
end;

procedure TCadEstado.btnAlterarClick(Sender: TObject);
begin
 if EdtCodigo.Text <> '' then begin
 CadEstadoModule.FDQuery1.Close;
 CadEstadoModule.FDQuery1.Open;

 CBAtivo.Enabled := True;
 EdtEstado.Enabled := True;
 EdtPais.Enabled := True;

 btnIncluir.Visible := False;
 btnExcluir.Visible := False;
 btnAlterar.Visible := False;
 SBPais.Enabled := True;
 btnGravarAlterar.Visible := True;

 btnGravarIncluir.Visible := False;
 btnDesistir.Visible := True
 end
 else showmessage('Nenhum estado selecionado!');
end;

procedure TCadEstado.btnGravarAlterarClick(Sender: TObject);
var codigo, estado, pais, ativo, tela: string;
    data: tdatetime;
begin
  codigo := EdtCodigo.Text;
  estado := EdtEstado.Text;
  Pais := EdtPais.Text;
  if CBAtivo.Checked then Ativo := 'S'
  else Ativo := 'N';
  data := now;
  tela := 'CadEstado';

  if EdtCodigo.Text = '' then begin
  ShowMessage('Código não pode ser vazio!');
  end
  else begin

  if EdtEstado.Text = '' then begin
  ShowMessage('Estado não pode ser vazio!');
  end
  else begin

 if EdtPais.Text = '' then begin
 ShowMessage('País não pode ser vazio!');
 end
 else begin

  CadEstadoModule.FDQuery.Close;
  CadEstadoModule.FDQuery.SQL.Text :=
  'update cadestado set estado = :estado, pais = :pais, ativo = :ativo where codigo = :codigo';
  CadEstadoModule.FDQuery.ParamByName('codigo').AsString := codigo;
  CadEstadoModule.FDQuery.ParamByName('estado').AsString := estado;
  CadEstadoModule.FDQuery.ParamByName('pais').AsString := pais;
  CadEstadoModule.FDQuery.ParamByName('ativo').AsString := ativo;

  LogModule.InserirLog.SQL.Clear;
  LogModule.InserirLog.SQL.Text :=
  'insert into logs (descricao, tela, data, emp_id, usuario) values (:descricao, :tela, :data, :emp_id, :usuario)';
  LogModule.InserirLog.ParamByName('descricao').AsString :=
  'Alterou o Estado ' + Estado + ' no país ' + pais + ' no código ' + codigo + ' e ativo ' + ativo;
  LogModule.InserirLog.ParamByName('tela').AsString := tela;
  LogModule.InserirLog.ParamByName('data').AsDatetime := Data;
  LogModule.InserirLog.ParamByName('usuario').AsString := UsuarioLogado;
  LogModule.InserirLog.ParamByName('emp_id').AsString := EmpresaLogada;
  try
  CadEstadoModule.FDQuery.ExecSQL;
  LogModule.InserirLog.ExecSQL;
  ShowMessage('Alterado com sucesso!');
  EdtCodigo.Enabled := False;
  CBAtivo.Enabled := False;
  EdtEstado.Enabled := False;
  EdtPais.Enabled := False;

  btnIncluir.Visible := True;
  btnExcluir.Visible := True;
  btnAlterar.Visible := True;
  SBPais.Enabled := False;
  btnGravarAlterar.Visible := False;
  btnGravarIncluir.Visible := False;
  btnDesistir.Visible := False;

  CadEstadoModule.FDQuery1.Close;
  CadEstadoModule.FDQuery1.Open;
  except
  ShowMessage('Erro na gravação, operação abortada!');
  end;
end;
end;
end;
end;

procedure TCadEstado.btnDesistirClick(Sender: TObject);
begin
 EdtCodigo.Enabled := False;
 CBAtivo.Enabled := False;
 EdtEstado.Enabled := False;
 EdtPais.Enabled := False;

 btnIncluir.Visible := True;
 btnExcluir.Visible := True;
 btnAlterar.Visible := True;
 SBPais.Enabled := False;
 btnGravarAlterar.Visible := False;
 btnGravarIncluir.Visible := False;
 btnDesistir.Visible := False;

 EdtCodigo.Clear;
 EdtEstado.Clear;
 EdtPais.Clear;

 CadEstadoModule.FDQuery1.Close;
 CadEstadoModule.FDQuery1.Open;
end;

procedure TCadEstado.btnExcluirClick(Sender: TObject);
var codigo, estado, pais, ativo, tela: string;
    data: tdatetime;
begin
  codigo := EdtCodigo.Text;
  estado := EdtEstado.Text;
  Pais := EdtPais.Text;
  if CBAtivo.Checked then Ativo := 'S'
  else Ativo := 'N';
  data := now;
  tela := 'CadEstado';

  CadEstadoModule.FDQuery.SQL.Clear;
  CadEstadoModule.FDQuery.Close;
  CadEstadoModule.FDQuery.SQL.Text := 'select * from cadcidade where estado = :codigo';
  CadEstadoModule.FDQuery.ParamByName('codigo').AsString := codigo;
  CadEstadoModule.FDQuery.Open;

  if not CadEstadoModule.FDQuery.IsEmpty then begin
  ShowMessage('Estado está sendo usado no cadastro de Cidade! Favor verifique!');
  end
  else begin

  CadEstadoModule.FDQuery.SQL.Clear;
  CadEstadoModule.FDQuery.Close;
  CadEstadoModule.FDQuery.SQL.Text := 'select * from cadcep where estado = :codigo';
  CadEstadoModule.FDQuery.ParamByName('codigo').AsString := codigo;
  CadEstadoModule.FDQuery.Open;

  if not CadEstadoModule.FDQuery.IsEmpty then begin
  ShowMessage('Estado está sendo usado no cadastro de CEP! Favor verifique!');
  end
  else begin

  CadEstadoModule.FDQuery.SQL.Clear;
  CadEstadoModule.FDQuery.Close;
  CadEstadoModule.FDQuery.SQL.Text := 'select * from cadentidade where estado = :codigo';
  CadEstadoModule.FDQuery.ParamByName('codigo').AsString := codigo;
  CadEstadoModule.FDQuery.Open;

  if not CadEstadoModule.FDQuery.IsEmpty then begin
  ShowMessage('Estado está sendo usado no cadastro de Entidade! Favor verifique!');
  end
  else begin

  CadEstadoModule.FDQuery.SQL.Text := 'delete from cadestado where codigo = :codigo';
  CadEstadoModule.FDQuery.ParamByName('codigo').AsString := codigo;

  LogModule.InserirLog.SQL.Clear;
  LogModule.InserirLog.SQL.Text :=
  'insert into logs (descricao, tela, data, usuario, emp_id) values (:descricao, :tela, :data, :usuario, :emp_id)';
  LogModule.InserirLog.ParamByName('descricao').AsString :=
  'Deletou o Estado ' + estado + ' no país ' + pais + ' no código ' + codigo + ' e ativo ' + ativo;
  LogModule.InserirLog.ParamByName('tela').AsString := tela;
  LogModule.InserirLog.ParamByName('data').AsDatetime := Data;
  LogModule.InserirLog.ParamByName('usuario').AsString := UsuarioLogado;
  LogModule.InserirLog.ParamByName('emp_id').AsString := EmpresaLogada;
  try
  CadEstadoModule.FDQuery.ExecSQL;
  LogModule.InserirLog.ExecSQL;
  ShowMessage('Excluído com sucesso');
  EdtCodigo.Enabled := False;
  CBAtivo.Enabled := False;
  EdtEstado.Enabled := False;
  EdtPais.Enabled := False;

  btnIncluir.Visible := True;
  btnExcluir.Visible := True;
  btnAlterar.Visible := True;
  SBPais.Enabled := False;
  btnGravarAlterar.Visible := False;
  btnGravarIncluir.Visible := False;
  btnDesistir.Visible := False;

  EdtCodigo.Clear;
  EdtEstado.Clear;
  EdtPais.Clear;

  CadEstadoModule.FDQuery1.Close;
  CadEstadoModule.FDQuery1.Open;
  except
  ShowMessage('Erro na gravação!');
  end;
end;
CadEstadoModule.FDQuery1.Close;
CadEstadoModule.FDQuery1.Open;
end;
end;
end;

procedure TCadEstado.GridCellClick(Column: TColumn);
var codigo, estado, pais, ativo: string;
begin
  EdtCodigo.Text := CadEstadoModule.FDQuery1.FieldByName('codigo').AsString;
  EdtEstado.Text := CadEstadoModule.FDQuery1.FieldByName('estado').AsString;
  EdtPais.Text   := CadEstadoModule.FDQuery1.FieldByName('pais').AsString;
  CBAtivo.Checked := CadEstadoModule.FDQuery1.FieldByName('ativo').AsString = 'S';
end;

procedure TCadEstado.SBPaisClick(Sender: TObject);
var
  sigla: string;
begin
  CadPaisDataModule.FDQuery1.Close;
  CadPaisDataModule.FDQuery1.Open;
  Application.CreateForm(TConsultarPais, ConsultarPais);
  sigla := ConsultarPais.SelecionarPais;
  if sigla <> '' then
  begin
    EdtPais.Text := sigla;
  end;
end;

procedure TCadEstado.FormShow(Sender: TObject);
var
  i: Integer;
begin
  for i := 0 to Grid.Columns.Count - 1 do
    Grid.Columns[i].Width := Grid.Canvas.TextWidth(Grid.Columns[i].Title.Caption + '     ');
end;

procedure TCadEstado.btnFecharClick(Sender: TObject);
begin
 FecharTela(Sender);
end;
end.
