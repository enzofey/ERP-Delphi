unit RelMovto;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Data.DB, Vcl.StdCtrls, Vcl.ComCtrls,
  Vcl.Grids, Vcl.DBGrids, Vcl.Buttons,
  RelMovtoDataModule,
  CorDataModule, ConsultarCorForm,
  DepositoDataModule, ConsultarDepositoForm,
  ProdutoDataModule, ConsultarProdutoForm,
  TamanhoDataModule, ConsultarTamanhoForm;

type
  TRelMovtoForm = class(TForm)
    Panel1: TPanel;
    lblCodigo: TLabel;
    lblCor: TLabel;
    lblDeposito: TLabel;
    lblTamanho: TLabel;
    SBProduto: TSpeedButton;
    SBCor: TSpeedButton;
    SBDeposito: TSpeedButton;
    SBTamanho: TSpeedButton;
    SBApagarProduto: TSpeedButton;
    SBApagarCor: TSpeedButton;
    SBApagarDeposito: TSpeedButton;
    SBApagarTamanho: TSpeedButton;
    Grid: TDBGrid;
    EdtProduto: TEdit;
    EdtCor: TEdit;
    EdtDeposito: TEdit;
    EdtTamanho: TEdit;
    btnConsultar: TButton;
    btnFechar: TButton;
    RGTipo: TRadioGroup;
    RBEntrada: TRadioButton;
    RBSaida: TRadioButton;
    RBAmbos: TRadioButton;
    lblEstornarMovimento: TLabel;
    lblMovimento: TLabel;
    edtID: TEdit;
    btnEstornar: TButton;
    procedure SBProdutoClick(Sender: TObject);
    procedure SBCorClick(Sender: TObject);
    procedure SBDepositoClick(Sender: TObject);
    procedure SBTamanhoClick(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);
    procedure SBApagarProdutoClick(Sender: TObject);
    procedure SBApagarCorClick(Sender: TObject);
    procedure SBApagarDepositoClick(Sender: TObject);
    procedure SBApagarTamanhoClick(Sender: TObject);
    procedure btnConsultarClick(Sender: TObject);
    procedure btnEstornarClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  RelMovtoForm: TRelMovtoForm;

implementation

{$R *.dfm}

Uses MenuPrincipal;

procedure TRelMovtoForm.btnConsultarClick(Sender: TObject);
var texto, codigo, cor, tamanho, deposito, tipo: string;
temwhere: boolean;
I :integer;
begin
  codigo := EdtProduto.Text;
  cor := EdtCor.Text;
  Tamanho := EdtTamanho.Text;
  Deposito := EdtDeposito.Text;
  if RBEntrada.Checked then
  Tipo := 'E'
  else if RBSaida.Checked then
  Tipo := 'S'
  else if RBAmbos.Checked then
  Tipo := '';

  RelMovtoModule.QueryProdMov.Close;
  RelMovtoModule.QueryProdMov.SQL.Clear;
  RelMovtoModule.QueryProdMov.SQL.Text :=
  'select pm.id, pm.codigo, pm.cor, pm.tamanho, pm.deposito, pm.lote, pm.qtde, pm.data, pm.tipo, pm.usuario, CAST(pm.obs AS VARCHAR(255)) as Observação from prodmov pm ' +
  'inner join cadproduto cp on (cp.codigo = pm.codigo) ' +
  'inner join cadcor cc on (cc.descricao = pm.cor) ' +
  'inner join cadtamanho ct on (ct.codigo = pm.tamanho) ' +
   'inner join caddeposito cd on (cd.codigo = pm.deposito) ';
  temwhere := False;

  if codigo <> '' then
  begin
  if temwhere then begin
  RelMovtoModule.QueryProdMov.SQL.Add('and cp.codigo = :codigo');
  RelMovtoModule.QueryProdMov.ParamByName('codigo').AsString := codigo;
  end
  else begin
  RelMovtoModule.QueryProdMov.SQL.Add('where cp.codigo = :codigo');
  RelMovtoModule.QueryProdMov.ParamByName('codigo').AsString := codigo;
  end;
end;
  temwhere := true;

  if cor <> '' then
  begin
   if temwhere then begin
  RelMovtoModule.QueryProdMov.SQL.Add('and cc.codigo = :cor');
  RelMovtoModule.QueryProdMov.ParamByName('cor').AsString := cor;
  end
  else begin
  RelMovtoModule.QueryProdMov.SQL.Add('where cc.codigo = :cor');
  RelMovtoModule.QueryProdMov.ParamByName('cor').AsString := cor;
  end;
  end;
  temwhere := True;

  if deposito <> '' then
  begin
   if temwhere then begin
  RelMovtoModule.QueryProdMov.SQL.Add('and cd.codigo = :deposito');
  RelMovtoModule.QueryProdMov.ParamByName('deposito').AsString := deposito;
  end
  else begin
  RelMovtoModule.QueryProdMov.SQL.Add('where cd.codigo = :deposito');
  RelMovtoModule.QueryProdMov.ParamByName('deposito').AsString := deposito;
  end;
  end;
  temwhere := True;

  if tamanho <> '' then
  begin
   if temwhere then begin
  RelMovtoModule.QueryProdMov.SQL.Add('and ct.codigo = :tamanho');
  RelMovtoModule.QueryProdMov.ParamByName('tamanho').AsString := tamanho;
  end
  else begin
  RelMovtoModule.QueryProdMov.SQL.Add('where ct.codigo = :tamanho');
  RelMovtoModule.QueryProdMov.ParamByName('tamanho').AsString := tamanho;
  end;
  end;
  temwhere := True;

  if tipo = 'S' then
  begin
   if temwhere then begin
  RelMovtoModule.QueryProdMov.SQL.Add('and pm.tipo = :tipo');
  RelMovtoModule.QueryProdMov.ParamByName('tipo').AsString := tipo;
  end
  else begin
  RelMovtoModule.QueryProdMov.SQL.Add('where pm.tipo = :tipo');
  RelMovtoModule.QueryProdMov.ParamByName('tipo').AsString := tipo;
  end;
  end;
  temwhere := True;

  if tipo = 'E' then
  begin
   if temwhere then begin
  RelMovtoModule.QueryProdMov.SQL.Add('and pm.tipo = :tipo');
  RelMovtoModule.QueryProdMov.ParamByName('tipo').AsString := tipo;
  end
  else begin
  RelMovtoModule.QueryProdMov.SQL.Add('where pm.tipo = :tipo');
  RelMovtoModule.QueryProdMov.ParamByName('tipo').AsString := tipo;
  end;
  end;
  temwhere := True;

  if not RBEntrada.Checked and not RBSaida.Checked and not RBAmbos.Checked then begin
  ShowMessage('Tipo do movimento não selecionado!')
  end
  else begin
  RelMovtoModule.QueryProdMov.Open;
    for i := 0 to Grid.Columns.Count - 1 do
  begin
    texto := Grid.Columns[i].Title.Caption;

    if Length(Grid.DataSource.DataSet.Fields[i].AsString) > Length(texto) then
      texto := Grid.DataSource.DataSet.Fields[i].AsString;

    Grid.Columns[i].Width := Grid.Canvas.TextWidth(texto + '    ');
  end;
  end;
end;

procedure TRelMovtoForm.btnFecharClick(Sender: TObject);
begin
    begin
    (Parent as TTabSheet).PageControl := nil;
    Parent.Free;
  end;
end;

procedure TRelMovtoForm.SBCorClick(Sender: TObject);
var
  cor: string;
begin
  CadCorModule.ConsultarCor.Close;
  CadCorModule.ConsultarCor.Open;
  Application.CreateForm(TConsultarCor, ConsultarCor);
  cor := ConsultarCor.SelecionarCor;
  if cor <> '' then
  begin
    EdtCor.Text := cor;
  end;
end;

procedure TRelMovtoForm.SBDepositoClick(Sender: TObject);
var
  codigo: string;
begin
  CadDepositoDataModule.ConsultarDeposito.Close;
  CadDepositoDataModule.ConsultarDeposito.Open;
  Application.CreateForm(TConsultarDeposito, ConsultarDeposito);
  codigo := ConsultarDeposito.SelecionarDeposito;
  if codigo <> '' then
  begin
    EdtDeposito.Text := codigo;
  end;
end;

procedure TRelMovtoForm.SBProdutoClick(Sender: TObject);
var
  codigo: string;
begin
  CadProdutoModule.ConsultarProduto.Close;
  CadProdutoModule.ConsultarProduto.Open;
  Application.CreateForm(TConsultarProduto, ConsultarProduto);
  codigo := ConsultarProduto.SelecionarProduto;
  if codigo <> '' then
  begin
    EdtProduto.Text := codigo;
  end;
end;

procedure TRelMovtoForm.SBTamanhoClick(Sender: TObject);
var
  codigo: string;
begin
  CadDepositoDataModule.ConsultarDeposito.Close;
  CadDepositoDataModule.FDQuery.Open;
  Application.CreateForm(TConsultarTamanho, ConsultarTamanho);
  codigo := ConsultarTamanho.SelecionarTamanho;
  if codigo <> '' then
  begin
    EdtTamanho.Text := codigo;
  end;
end;

procedure TRelMovtoForm.SBApagarCorClick(Sender: TObject);
begin
 EdtCor.Clear;
end;

procedure TRelMovtoForm.SBApagarDepositoClick(Sender: TObject);
begin
 EdtDeposito.Clear;
end;

procedure TRelMovtoForm.SBApagarProdutoClick(Sender: TObject);
begin
 EdtProduto.Clear;
end;

procedure TRelMovtoForm.SBApagarTamanhoClick(Sender: TObject);
begin
 EdtTamanho.Clear;
end;

procedure TRelMovtoForm.btnEstornarClick(Sender: TObject);
var
  ID, codigo, cor, tamanho, deposito, lote, qtde, tipo: string;
begin
  ID := EdtID.Text;

  if MessageDlg('Deseja continuar com o estorno? Essa ação é irreversível! Na dúvida, faça apenas uma entrada ou saída no código desejado!',
    mtConfirmation, [mbYes, mbNo], 0) = mrNo then
  begin
    Exit;
  end;

  RelMovtoModule.IDQuery.Close;
  RelMovtoModule.IDQuery.SQL.Text :=
    'select ID, codigo, cor, tamanho, deposito, lote, qtde, tipo from prodmov where id = :ID';
  RelMovtoModule.IDQuery.ParamByName('ID').AsString := ID;
  RelMovtoModule.IDQuery.Open;

  if RelMovtoModule.IDQuery.IsEmpty then
  begin
    ShowMessage('ID do movimento não encontrado');
    Exit;
  end;

  codigo := RelMovtoModule.IDQuery.FieldByName('codigo').AsString;
  cor := RelMovtoModule.IDQuery.FieldByName('cor').AsString;
  tamanho := RelMovtoModule.IDQuery.FieldByName('tamanho').AsString;
  deposito := RelMovtoModule.IDQuery.FieldByName('deposito').AsString;
  lote := RelMovtoModule.IDQuery.FieldByName('lote').AsString;
  qtde := RelMovtoModule.IDQuery.FieldByName('qtde').AsString;
  tipo := RelMovtoModule.IDQuery.FieldByName('tipo').AsString;

  RelMovtoModule.Conexão.StartTransaction;
  try
    RelMovtoModule.EstornarQuery.Close;
    RelMovtoModule.EstornarQuery.SQL.Text := 'delete from prodmov where id = :ID';
    RelMovtoModule.EstornarQuery.ParamByName('ID').AsString := ID;
    RelMovtoModule.EstornarQuery.ExecSQL;

    if tipo = 'E' then
      RelMovtoModule.EstornarQuery.SQL.Text :=
        'update estoque set qtde = qtde - :qtde ' +
        'where codigo = :codigo and cor = :cor and tamanho = :tamanho and deposito = :deposito and lote = :lote'
    else if tipo = 'S' then
      RelMovtoModule.EstornarQuery.SQL.Text :=
        'update estoque set qtde = qtde + :qtde ' +
        'where codigo = :codigo and cor = :cor and tamanho = :tamanho and deposito = :deposito and lote = :lote'
    else
      raise Exception.Create('Tipo de movimentação desconhecido: ' + tipo);

    RelMovtoModule.EstornarQuery.ParamByName('qtde').AsInteger := StrToInt(qtde);
    RelMovtoModule.EstornarQuery.ParamByName('codigo').AsString := codigo;
    RelMovtoModule.EstornarQuery.ParamByName('cor').AsString := cor;
    RelMovtoModule.EstornarQuery.ParamByName('tamanho').AsString := tamanho;
    RelMovtoModule.EstornarQuery.ParamByName('deposito').AsString := deposito;
    RelMovtoModule.EstornarQuery.ParamByName('lote').AsString := lote;
    RelMovtoModule.EstornarQuery.ExecSQL;

    RelMovtoModule.Conexão.Commit;

    ShowMessage('Estornado com sucesso!');
    EdtID.Clear;
  except
    on E: Exception do
    begin
      RelMovtoModule.Conexão.Rollback;
      ShowMessage('Erro no estorno: ' + E.Message);
    end;
  end;
end;
end.
